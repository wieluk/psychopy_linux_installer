name: reusable test workflow

on:
  workflow_call:
    inputs:
      test-mode:
        required: false
        type: string
        default: "normal"
        description: "The test mode to run (normal, build, quick)"

jobs:
  run-installer:
    runs-on: ${{ inputs.test-mode == 'quick' && fromJson(format('["{0}"]', matrix.os)) || fromJson(format('["self-hosted", "{0}"]', matrix.os)) }}
    strategy:
      matrix:
        os: ${{ inputs.test-mode == 'quick' && fromJson('["ubuntu-24.04", "ubuntu-22.04"]') || fromJson('["ubuntu-24", "ubuntu-22", "ubuntu-20", "debian-12", "debian-11", "fedora-39", "fedora-40", "fedora-41", "pop-22", "rocky-9", "centos-9", "manjarolinux-25", "opensuse-leap-15", "linuxmint-22"]') }}
        python_version: ${{ inputs.test-mode == 'build' && fromJson('["3.10"]') || fromJson('["3.8", "3.9", "3.10"]') }}
        psychopy_version: ${{ inputs.test-mode == 'build' && fromJson('["latest"]') || fromJson('["latest", "2024.1.4", "2023.2.3"]') }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup environment and install
        env:
          PYTHON_VERSION: ${{ matrix.python_version }}
          PSYCHOPY_VERSION: ${{ matrix.psychopy_version }}
        run: |
          sudo chmod +x $GITHUB_WORKSPACE/psychopy_linux_installer
          sudo rm -rf /tmp_dir
          sudo mkdir /tmp_dir
          sudo chmod -R a+rX /tmp_dir
          sudo chown -R $USER:$(id -gn $USER) /tmp_dir
          BUILD_FLAG="${{ inputs.test-mode == 'build' && '--build=both' || '' }}"
          ARGS="--python-version=$PYTHON_VERSION --psychopy-version=$PSYCHOPY_VERSION --install-dir=/tmp_dir --venv-name=psychopy -f --non-interactive --additional-packages=pytest $BUILD_FLAG"
          $GITHUB_WORKSPACE/psychopy_linux_installer $ARGS

      - name: Show installation logs
        if: always()
        run: |
          LOG_FILE=$(find /tmp /tmp_dir -name 'psychopy_linux_installer_*.log' -type f -print0 2>/dev/null | xargs -0 ls -t 2>/dev/null | head -n1)
          if [ -n "$LOG_FILE" ]; then
            echo "=== Found installation log: $LOG_FILE ==="
            cat "$LOG_FILE"
            echo "==== End of log ===="
          else
            echo "No installation logs found in either /tmp or /tmp_dir"
          fi

      - name: Verify PsychoPy installation, PATH, and version
        run: |
          if [ "$PSYCHOPY_VERSION" = "latest" ]; then
            PSYCHOPY_VERSION=$(curl -s "https://pypi.org/pypi/psychopy/json" | jq -r .info.version)
          fi
          if ! /tmp_dir/psychopy/start_psychopy -v | grep -qE "PsychoPy3, version $PSYCHOPY_VERSION"; then
            echo "PsychoPy version check failed in venv. Expected version: $PSYCHOPY_VERSION"
            exit 1
          fi

          if ! psychopy -v | grep -qE "PsychoPy3, version $PSYCHOPY_VERSION"; then
            echo "psychopy not found in PATH or wrong version. Expected version: $PSYCHOPY_VERSION"
            exit 1
          fi

      - name: Install xvfb
        if: ${{ inputs.test-mode == 'quick' }}
        run: |
          sudo apt-get update && sudo apt-get install -y xvfb

      - name: Run PsychoPy pytest
        run: |
          echo "Starting PsychoPy pytest..."
          if [ "${{ inputs.test-mode }}" = "quick" ]; then
            sleep 3
            xvfb-run -s "-screen 0 1024x768x24" /tmp_dir/psychopy/bin/python -m pytest .github/psychopy_tests/pytest_installation.py -v --disable-warnings
          else
            /tmp_dir/psychopy/bin/python -m pytest .github/psychopy_tests/pytest_installation.py -v --disable-warnings
          fi
          echo "PsychoPy pytest completed"

      - name: Run PsychoPy program
        id: run_psychopy_program
        if: ${{ matrix.psychopy_version == 'latest' }}
        run: |
          echo "Starting PsychoPy program..."
          if [ "${{ inputs.test-mode }}" = "quick" ]; then
            sleep 3
            xvfb-run -s "-screen 0 1024x768x24" /tmp_dir/psychopy/bin/python .github/psychopy_tests/test_program/test_program_lastrun.py
          else
            /tmp_dir/psychopy/bin/python .github/psychopy_tests/test_program/test_program_lastrun.py
          fi
          echo "PsychoPy program completed"

      - name: Test PsychoPy venv as new desktop user
        if: ${{ matrix.os != 'debian-11' && matrix.os != 'debian-12' }}
        run: |
          NEWUSER=testpsychopyuser
          sudo useradd -m -s /bin/bash $NEWUSER

          output=$(sudo -i -u $NEWUSER bash -c 'DISPLAY=:0 /tmp_dir/psychopy/bin/psychopy -v' || true)
          if ! echo "$output" | grep -qE "PsychoPy3, version $PSYCHOPY_VERSION"; then
            echo "PsychoPy version check failed as new user. Expected version: $PSYCHOPY_VERSION"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          # Remove PsychoPy test user and all related files
          if id "testpsychopyuser" &>/dev/null; then
            sudo pkill -u testpsychopyuser || true
            sudo userdel -r testpsychopyuser || true
            sudo rm -rf /home/testpsychopyuser
          fi
          sudo rm -rf /tmp_dir ~/Desktop/* ~/.local/share/applications/*
          if [ -f ~/.bashrc ]; then
            grep -v 'psychopy' ~/.bashrc > ~/.bashrc.tmp && mv ~/.bashrc.tmp ~/.bashrc
          fi

  run-installer-with-requirements-txt:
    name: Run installer with requirements file
    if: ${{ inputs.test-mode != 'build' }}
    runs-on: ${{ inputs.test-mode == 'quick' && fromJson(format('["{0}"]', matrix.os)) || fromJson(format('["self-hosted", "{0}"]', matrix.os)) }}
    strategy:
      matrix:
        os: ${{ inputs.test-mode == 'quick' && fromJson('["ubuntu-latest"]') || fromJson('["ubuntu-24"]') }}
        req_file:
          - ".github/psychopy_tests/test_windows_requirements.txt"
          - ".github/psychopy_tests/test_linux_requirements.txt"
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment and install from requirements file
        env:
          REQ_FILE: ${{ matrix.req_file }}
        run: |
          sudo chmod +x $GITHUB_WORKSPACE/psychopy_linux_installer
          sudo rm -rf /tmp_dir
          sudo mkdir /tmp_dir
          sudo chmod -R a+rX /tmp_dir
          sudo chown -R $USER:$(id -gn $USER) /tmp_dir
          ARGS="--install-dir=/tmp_dir --venv-name=psychopy -f --non-interactive --requirements-file=$REQ_FILE --additional-packages=pytest"
          $GITHUB_WORKSPACE/psychopy_linux_installer $ARGS

      - name: Show installation logs
        if: always()
        run: |
          LOG_FILE=$(find /tmp /tmp_dir -name 'psychopy_linux_installer_*.log' -type f -print0 2>/dev/null | xargs -0 ls -t 2>/dev/null | head -n1)
          if [ -n "$LOG_FILE" ]; then
            echo "=== Found installation log: $LOG_FILE ==="
            cat "$LOG_FILE"
            echo "==== End of log ===="
          else
            echo "No installation logs found in either /tmp or /tmp_dir"
          fi

      - name: Verify PsychoPy installation and version
        run: |
          /tmp_dir/psychopy/bin/psychopy -v

      - name: Compare installed packages with requirements.txt
        env:
          REQ_FILE: ${{ matrix.req_file }}
        run: |
          differences_found=0

          # Read the requirements file line by line.
          while IFS= read -r line || [[ -n "$line" ]]; do
            line="$(echo "$line" | xargs)"
            if [[ -z "$line" || "$line" =~ ^# ]]; then
              continue
            fi

            # Check if the line has a version specifier.
            if [[ "$line" == *"=="* ]]; then
              pkg="$(echo "$line" | cut -d'=' -f1 | xargs | tr '[:upper:]' '[:lower:]')"
              # Assuming the format "package==version", field 3 is the version.
              req_ver="$(echo "$line" | cut -d'=' -f3 | xargs)"
            else
              pkg="$(echo "$line" | tr '[:upper:]' '[:lower:]')"
              req_ver=""
            fi

            # Get the installed version using pip show.
            installed_version="$(/tmp_dir/psychopy/bin/pip show "$pkg" 2>/dev/null | grep -i '^Version:' | awk '{print $2}' || true)"
            if [[ -z "$installed_version" ]]; then
              echo "Missing: $pkg (required ${req_ver:-any version})"
              differences_found=1
            elif [[ -n "$req_ver" && "$installed_version" != "$req_ver" ]]; then
              echo "Version mismatch: $pkg (required $req_ver, installed $installed_version)"
              differences_found=1
            fi
          done < "$REQ_FILE"

          if [[ $differences_found -eq 0 ]]; then
            echo "All requirements match the installed environment."
          fi

      - name: Install xvfb
        if: ${{ inputs.test-mode == 'quick' }}
        run: |
          sudo apt-get update && sudo apt-get install -y xvfb

      - name: Run PsychoPy pytest
        run: |
          echo "Starting PsychoPy pytest..."
          if [ "${{ inputs.test-mode }}" = "quick" ]; then
            sleep 3
            xvfb-run -s "-screen 0 1024x768x24" /tmp_dir/psychopy/bin/python -m pytest .github/psychopy_tests/pytest_installation.py -v --disable-warnings
          else
            /tmp_dir/psychopy/bin/python -m pytest .github/psychopy_tests/pytest_installation.py -v --disable-warnings
          fi
          echo "PsychoPy pytest completed"

      - name: Run PsychoPy program
        id: run_psychopy_program
        run: |
          echo "Starting PsychoPy program..."
          if [ "${{ inputs.test-mode }}" = "quick" ]; then
            sleep 3
            xvfb-run -s "-screen 0 1024x768x24" /tmp_dir/psychopy/bin/python .github/psychopy_tests/test_program/test_program_lastrun.py
          else
            /tmp_dir/psychopy/bin/python .github/psychopy_tests/test_program/test_program_lastrun.py
          fi
          echo "PsychoPy program completed"

      - name: Cleanup
        if: always()
        run: |
          sudo rm -rf /tmp_dir ~/Desktop/* ~/.local/share/applications/*
