name: Reusable Build Workflow

on:
  workflow_call:

jobs:
  build:
    runs-on: [self-hosted, "${{ matrix.os }}"]
    strategy:
      matrix:
        os:
          - ubuntu-24.04
          - ubuntu-22.04
          - ubuntu-20.04
          - debian-12
          - debian-11
          - fedora-39
          - fedora-40
          - pop-22.04
          - rocky-9.4
          - centos-9
          - manjarolinux-24
          - opensuse-leap-15.6
          - linuxmint-22
        python_version: ['3.8', '3.9', '3.10']
      fail-fast: false
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo rm -rf /tmp_dir
          sudo mkdir /tmp_dir
          sudo chown -R $USER:$(id -gn $USER) /tmp_dir
          
          if command -v jq >/dev/null 2>&1; then
            echo "jq is already installed"
          else
            if command -v apt-get > /dev/null; then
              sudo apt-get update || true
              sudo apt-get install -y jq curl || true
            elif command -v pacman > /dev/null; then
              sudo pacman -Sy --noconfirm jq curl || true
            elif command -v dnf > /dev/null; then
              sudo dnf install -y jq curl || true
            elif command -v yum > /dev/null; then
              sudo yum install -y jq curl || true
            elif command -v zypper > /dev/null; then
              sudo zypper install -y jq curl || true
            else
              echo "Unsupported package manager"
              exit 1
            fi
          fi

      - name: Extract versions from script
        id: extract_versions
        run: |
          INSTALLER_VERSION=$(grep -m1 '^# *Version:' psychopy_linux_installer | sed 's/^# *Version: *//')
          if [ -z "$INSTALLER_VERSION" ]; then
            exit 1
          fi
          WXPYTHON_VERSION=$(grep -m1 '^\s*wxpython_version=' psychopy_linux_installer | sed 's/^[^=]*=//;s/"//g')
          if [ -z "$WXPYTHON_VERSION" ]; then
            exit 1
          fi
          echo "INSTALLER_VERSION=$INSTALLER_VERSION" >> $GITHUB_ENV
          echo "WXPYTHON_VERSION=$WXPYTHON_VERSION" >> $GITHUB_ENV
          echo "Installer Version extracted: $INSTALLER_VERSION"
          echo "wxPython version extracted: $WXPYTHON_VERSION"

      - name: Get release info
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          RELEASE_TAG="v${INSTALLER_VERSION}"
          API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${RELEASE_TAG}"
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$API_URL")
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed 's/{?name,label}//')
          if [ "$RELEASE_ID" == "null" ] || [ -z "$RELEASE_ID" ]; then
            exit 1
          fi
          echo "release_id=$RELEASE_ID" >> $GITHUB_ENV
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_ENV

      - name: Check existing files and set variables
        id: check-files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          RELEASE_ID: ${{ env.release_id }}
        run: |
          RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")
          
          CURRENT_VERSION="${INSTALLER_VERSION}"
          
          PREVIOUS_RELEASE_ID=$(echo "$RELEASES" | jq -r "
            map(select(.tag_name != \"v${CURRENT_VERSION}\"))
            | sort_by(.created_at)
            | reverse
            | .[0].id
          ")
          
          PYTHON_VERSION="${{ matrix.python_version }}"
          PYTHON_FULL_VERSION=$(curl -s https://www.python.org/ftp/python/ | grep -oP "href=\"${PYTHON_VERSION}\.[0-9]+/\"" | grep -oP "${PYTHON_VERSION}\.[0-9]+/" | sort -V | tail -n 1 | tr -d '/')
          if [ -z "$PYTHON_FULL_VERSION" ]; then
            echo "Failed to determine the latest patch version for Python ${PYTHON_VERSION}."
            exit 1
          fi
          
          # Function to detect OS of machine
          detect_os_version() {
              if [ -f /etc/os-release ]; then
                  . /etc/os-release
                  if [ -n "$ID" ] && [ -n "$VERSION_ID" ]; then
                      major_version=$(echo "$VERSION_ID" | cut -d. -f1)
                      echo "$ID-$major_version"
                      return
                  fi
              fi

              if command -v lsb_release > /dev/null 2>&1; then
                  version=$(lsb_release -sr | cut -d. -f1)
                  echo "$(lsb_release -si)-$version"
                  return
              fi

              if [ -f /etc/lsb-release ]; then
                  . /etc/lsb-release
                  version=$(echo "$DISTRIB_RELEASE" | cut -d. -f1)
                  echo "${DISTRIB_ID}-$version"
                  return
              fi

              if [ -f /etc/debian_version ]; then
                  version=$(cut -d. -f1 < /etc/debian_version)
                  echo "debian-$version"
                  return
              fi

              if [ -f /etc/redhat-release ]; then
                  version=$(sed 's/.*release \([0-9]*\).*/\1/' < /etc/redhat-release)
                  distro_name=$(sed 's/ release [0-9]*.*//' < /etc/redhat-release | awk '{print tolower($1)}')
                  echo "$distro_name-$version"
                  return
              fi

              log_message "Error: Unable to detect OS version."
              exit 1
          }

          OS_VERSION=$(detect_os_version | tr '[:upper:]' '[:lower:]')
          PROCESSOR_STRUCTURE=$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m)
          PYTHON_MAJOR=$(echo "${PYTHON_VERSION}" | cut -d. -f1)
          PYTHON_MINOR=$(echo "${PYTHON_VERSION}" | cut -d. -f2)

          PYTHON_TARBALL_NAME="python-${PYTHON_FULL_VERSION}-${PROCESSOR_STRUCTURE}-${OS_VERSION}.tar.gz"
          WXPYTHON_WHEEL_NAME="wxPython-${WXPYTHON_VERSION}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-${PROCESSOR_STRUCTURE}-${OS_VERSION}.whl"
          
          check_assets() {
            local release_id=$1
            local page=1
            local assets=""
            
            while :; do
              local response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/${release_id}/assets?per_page=100&page=$page")
              
              [ "$(echo "$response" | jq '. | length')" -eq 0 ] && break
              
              while read -r name && read -r url; do
                assets+="$name"$'\n'"$url"$'\n'
              done < <(echo "$response" | jq -r '.[] | (.name, .browser_download_url)')
              
              page=$((page + 1))
            done
            echo "$assets"
          }

          CURRENT_ASSETS=""
          if [ ! -z "$RELEASE_ID" ]; then
            CURRENT_ASSETS=$(check_assets "$RELEASE_ID")
          fi
          
          PREVIOUS_ASSETS=""
          if [ ! -z "$PREVIOUS_RELEASE_ID" ] && [ "$PREVIOUS_RELEASE_ID" != "null" ]; then
            PREVIOUS_ASSETS=$(check_assets "$PREVIOUS_RELEASE_ID")
          fi

          PYTHON_EXISTS=false
          WXPYTHON_EXISTS=false
          PYTHON_URL=""
          WXPYTHON_URL=""
          FOUND_PYTHON_IN_CURRENT=false
          FOUND_WXPYTHON_IN_CURRENT=false
          FOUND_PYTHON_IN_PREVIOUS=false
          FOUND_WXPYTHON_IN_PREVIOUS=false

          while IFS= read -r line; do
            if [ "$line" = "$PYTHON_TARBALL_NAME" ]; then
              read -r url
              PYTHON_EXISTS=true
              PYTHON_URL="$url"
              FOUND_PYTHON_IN_CURRENT=true
            elif [ "$line" = "$WXPYTHON_WHEEL_NAME" ]; then
              read -r url
              WXPYTHON_EXISTS=true
              WXPYTHON_URL="$url"
              FOUND_WXPYTHON_IN_CURRENT=true
            fi
          done <<< "$CURRENT_ASSETS"

          if [ "$PYTHON_EXISTS" = false ] || [ "$WXPYTHON_EXISTS" = false ]; then
            while IFS= read -r line; do
              if [ "$line" = "$PYTHON_TARBALL_NAME" ] && [ "$PYTHON_EXISTS" = false ]; then
                read -r url
                PYTHON_EXISTS=true
                PYTHON_URL="$url"
                FOUND_PYTHON_IN_PREVIOUS=true
              elif [ "$line" = "$WXPYTHON_WHEEL_NAME" ] && [ "$WXPYTHON_EXISTS" = false ]; then
                read -r url
                WXPYTHON_EXISTS=true
                WXPYTHON_URL="$url"
                FOUND_WXPYTHON_IN_PREVIOUS=true
              fi
            done <<< "$PREVIOUS_ASSETS"
          fi

          if [ "$PYTHON_EXISTS" = true ]; then
            echo "SKIP_PYTHON_PROCESS=true" >> $GITHUB_ENV
            if [ "$FOUND_PYTHON_IN_PREVIOUS" = true ]; then
              echo "TRANSFER_PYTHON_FROM_PREVIOUS=true" >> $GITHUB_ENV
            else
              echo "TRANSFER_PYTHON_FROM_PREVIOUS=false" >> $GITHUB_ENV
            fi
            echo "PYTHON_URL=$PYTHON_URL" >> $GITHUB_ENV
          else
            echo "SKIP_PYTHON_PROCESS=false" >> $GITHUB_ENV
            echo "TRANSFER_PYTHON_FROM_PREVIOUS=false" >> $GITHUB_ENV
          fi

          if [ "$WXPYTHON_EXISTS" = true ]; then
            echo "SKIP_WXPYTHON_PROCESS=true" >> $GITHUB_ENV
            if [ "$FOUND_WXPYTHON_IN_PREVIOUS" = true ]; then
              echo "TRANSFER_WXPYTHON_FROM_PREVIOUS=true" >> $GITHUB_ENV
            else
              echo "TRANSFER_WXPYTHON_FROM_PREVIOUS=false" >> $GITHUB_ENV
            fi
            echo "WXPYTHON_URL=$WXPYTHON_URL" >> $GITHUB_ENV
          else
            echo "SKIP_WXPYTHON_PROCESS=false" >> $GITHUB_ENV
            echo "TRANSFER_WXPYTHON_FROM_PREVIOUS=false" >> $GITHUB_ENV
          fi

          echo "PROCESSOR_STRUCTURE=${PROCESSOR_STRUCTURE}" >> $GITHUB_ENV
          echo "OS_VERSION=${OS_VERSION}" >> $GITHUB_ENV
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> $GITHUB_ENV
          echo "PYTHON_FULL_VERSION=${PYTHON_FULL_VERSION}" >> $GITHUB_ENV
          echo "PYTHON_TARBALL_NAME=${PYTHON_TARBALL_NAME}" >> $GITHUB_ENV
          echo "WXPYTHON_WHEEL_NAME=${WXPYTHON_WHEEL_NAME}" >> $GITHUB_ENV

      - name: Transfer Python from previous release
        if: env.TRANSFER_PYTHON_FROM_PREVIOUS == 'true'
        run: |
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            -o "/tmp_dir/${PYTHON_TARBALL_NAME}" \
            "${{ env.PYTHON_URL }}"

          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @"/tmp_dir/${PYTHON_TARBALL_NAME}" \
            "${{ env.upload_url }}?name=${PYTHON_TARBALL_NAME}"

      - name: Transfer wxPython from previous release
        if: env.TRANSFER_WXPYTHON_FROM_PREVIOUS == 'true'
        run: |
          curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/octet-stream" \
            -o "/tmp_dir/${WXPYTHON_WHEEL_NAME}" \
            "${{ env.WXPYTHON_URL }}"

          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"/tmp_dir/${WXPYTHON_WHEEL_NAME}" \
            "${{ env.upload_url }}?name=${WXPYTHON_WHEEL_NAME}"

      - name: Set up dependencies
        if: env.SKIP_PYTHON_PROCESS == 'false' || env.SKIP_WXPYTHON_PROCESS == 'false'
        run: |
          if command -v apt-get > /dev/null; then
            sudo apt-get update || true
            packages=(
              git curl jq python3-pip python3-dev libgtk-3-dev libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libxcb-xinerama0 
              libegl1-mesa-dev python3-venv libsdl2-dev libglu1-mesa-dev libusb-1.0-0-dev portaudio19-dev 
              libasound2-dev build-essential libssl-dev zlib1g-dev libsqlite3-dev libffi-dev libbz2-dev 
              libreadline-dev xz-utils libjpeg-dev libpng-dev gstreamer1.0-plugins-base gstreamer1.0-tools 
              gstreamer1.0-x freeglut3-dev libtiff-dev libnotify-dev libsm-dev make
            )
            for pkg in "${packages[@]}"; do
              sudo apt-get install -y "$pkg" || true
            done
          elif command -v pacman > /dev/null; then
            sudo pacman -Syu --noconfirm || true
            packages=(
              git curl jq python python-devel gtk3 webkit2gtk libxcb mesa sdl2 glu 
              libusb portaudio alsa-lib base-devel openssl zlib sqlite libffi bzip2 
              readline xz libjpeg libpng libsm gstreamer gstreamer-base freeglut 
              libtiff libnotify make
            )
            for pkg in "${packages[@]}"; do
              sudo pacman -S --noconfirm "$pkg" || true
            done
          elif command -v dnf > /dev/null; then
            sudo dnf check-update || true
            packages=(
              git curl jq python3-devel python3-pip gtk3-devel webkit2gtk3-devel libxcb-xinerama 
              mesa-libEGL-devel SDL2-devel mesa-libGLU-devel libusb1-devel portaudio-devel alsa-lib-devel 
              gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel readline-devel 
              xz-devel libjpeg-devel libpng-devel libSM-devel gcc-c++ gstreamer1-plugins-base 
              gstreamer1-devel freeglut-devel libjpeg-turbo-devel libtiff-devel libnotify-devel make
            )
            for pkg in "${packages[@]}"; do
              sudo dnf install -y "$pkg" || true
            done
          elif command -v yum > /dev/null; then
            sudo yum check-update || true
            packages=(
              git curl jq python3-devel python3-pip gtk3-devel webkit2gtk3-devel libxcb-xinerama 
              mesa-libEGL-devel SDL2-devel mesa-libGLU-devel libusb1-devel portaudio-devel alsa-lib-devel 
              gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel readline-devel 
              xz-devel libjpeg-devel libpng-devel libSM-devel gcc-c++ gstreamer1-plugins-base 
              gstreamer1-devel freeglut-devel libjpeg-turbo-devel libtiff-devel libnotify-devel make
            )
            for pkg in "${packages[@]}"; do
              sudo yum install -y "$pkg" || true
            done
          elif command -v zypper > /dev/null; then
            sudo zypper refresh || true
            packages=(
              git curl jq python3-pip python3-devel gtk3-devel webkit2gtk3-devel libxcb1 libxcb-xinerama0 
              Mesa-libEGL-devel SDL2-devel Mesa-libGLU-devel libusb-1_0-devel portaudio-devel alsa-devel 
              gcc-c++ libopenssl-devel libbz2-devel libffi-devel zlib-devel sqlite3-devel readline-devel 
              xz-devel libjpeg-devel libpng16-compat-devel libSM-devel gstreamer-plugins-base-devel 
              gstreamer-devel freeglut-devel libtiff-devel libnotify-devel make
            )
            for pkg in "${packages[@]}"; do
              sudo zypper install -y "$pkg" || true
            done
          else
            echo "Unsupported package manager"
            exit 1
          fi

      - name: Build Python
        if: env.SKIP_PYTHON_PROCESS == 'false'
        id: build-python
        run: |
          cd /tmp_dir
          curl -O "https://www.python.org/ftp/python/${PYTHON_FULL_VERSION}/Python-${PYTHON_FULL_VERSION}.tgz"
          tar -xf "Python-${PYTHON_FULL_VERSION}.tgz"
          cd "Python-${PYTHON_FULL_VERSION}"
          ./configure --enable-optimizations --with-ensurepip=install --prefix=/usr/local/psychopy_python
          make -j "$(nproc)"

          PYTHON_TARBALL_PATH="/tmp_dir/${PYTHON_TARBALL_NAME}"
          tar -czvf "$PYTHON_TARBALL_PATH" -C "/tmp_dir/Python-${PYTHON_FULL_VERSION}/" .
          echo "PYTHON_TARBALL_PATH=$PYTHON_TARBALL_PATH" >> $GITHUB_ENV

          sudo make altinstall

      - name: Upload Python
        if: env.SKIP_PYTHON_PROCESS == 'false' && steps.build-python.outcome == 'success'
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/gzip" \
          --data-binary @"${PYTHON_TARBALL_PATH}" \
          "${{ env.upload_url }}?name=${PYTHON_TARBALL_NAME}"

      - name: Build wxPython
        if: env.SKIP_WXPYTHON_PROCESS == 'false'
        id: build-wxpython
        run: |
          export PATH=/usr/local/psychopy_python/bin:$PATH
          /usr/local/psychopy_python/bin/python${{ matrix.python_version }} -m venv /tmp_dir/psychopy_venv
          source /tmp_dir/psychopy_venv/bin/activate
      
          pip install -U pip distro sip six setuptools wheel
      
          mkdir /tmp_dir/wxpython && cd /tmp_dir/wxpython
          pip download wxPython==$WXPYTHON_VERSION
          WXPYTHON_TARBALL=$(ls wxPython-*.tar.gz)
          tar -xzf "$WXPYTHON_TARBALL"
          WXPYTHON_DIR=$(find . -type d -name "wxPython-*")
          cd "$WXPYTHON_DIR"
      
          python --version
          python -m pip wheel .
      
          WXPYTHON_WHEEL=$(ls wxPython-*.whl)
          WXPYTHON_IDENTIFIED_WHEEL="/tmp_dir/${WXPYTHON_WHEEL_NAME}"
          cp "$WXPYTHON_WHEEL" "$WXPYTHON_IDENTIFIED_WHEEL"
          echo "WXPYTHON_IDENTIFIED_WHEEL=$WXPYTHON_IDENTIFIED_WHEEL" >> $GITHUB_ENV
      
          deactivate

      - name: Upload wxPython to Release
        if: env.SKIP_WXPYTHON_PROCESS == 'false' && steps.build-wxpython.outcome == 'success'
        run: |
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/octet-stream" \
          --data-binary @"${WXPYTHON_IDENTIFIED_WHEEL}" \
          "${{ env.upload_url }}?name=${WXPYTHON_WHEEL_NAME}"

      - name: Cleanup
        if: always()
        run: |
          sudo rm -rf /tmp_dir

