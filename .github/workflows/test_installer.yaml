name: Run PsychoPy Installer on Multiple Linux OS

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.github/workflows/build_python_wxpython.yaml'
      - '.github/workflows/test_build.yaml'

jobs:
  syntax-check:
    runs-on: [self-hosted, ubuntu-24.04]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: sudo apt-get install -y shellcheck

      - name: Check Bash Syntax
        run: bash -n $GITHUB_WORKSPACE/psychopy_linux_installer

      - name: Run ShellCheck
        run: shellcheck -e SC1017 -e SC1091 $GITHUB_WORKSPACE/psychopy_linux_installer

  run-installer:
    needs: syntax-check
    runs-on: [self-hosted, "${{ matrix.os }}"]
    strategy:
      matrix:
        os: [ubuntu-24.04 , ubuntu-22.04, ubuntu-20.04, debian-12, debian-11, fedora-39, fedora-40, pop-22.04, rocky-9.4, centos-9]
        python_version: ['3.8.19', '3.9.19', '3.10.14']
        psychopy_version: ['latest', '2023.2.3', '2024.1.4']
      fail-fast: false
    steps:
      - name: Determine versions
        id: determine-versions
        run: |
          get_latest_pypi_version() {
            local package_name=$1
            local latest_version
            latest_version=$(curl -s https://pypi.org/pypi/"$package_name"/json | jq -r .info.version)
            echo "$latest_version"
          }
          
          # Determine PsychoPy version
          if [ "${{ matrix.psychopy_version }}" == "latest" ]; then
            PSYCHOPY_VERSION_CLEAN=$(get_latest_pypi_version "psychopy" | tr -d ',;')
          else
            PSYCHOPY_VERSION_CLEAN=$(echo "${{ matrix.psychopy_version }}" | tr -d ',;')
          fi
        
          # Set environment variables and outputs
          echo "PSYCHOPY_VERSION_CLEAN=$PSYCHOPY_VERSION_CLEAN" >> $GITHUB_ENV
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Make script executable
        run: chmod +x $GITHUB_WORKSPACE/psychopy_linux_installer
      
      - name: create tmp and fix permissions
        run: |
          sudo rm -rf /tmp/*
          sudo rm -rf /tmp_dir
          sudo mkdir /tmp_dir
          sudo chmod -R 777 /tmp_dir
          sudo chown -R $USER:$USER /tmp_dir

      - name: Run PsychoPy Linux Installer
        id: run-installer
        continue-on-error: true
        run: |
          ARGS="--python_version=${{ matrix.python_version }} --psychopy_version=${{ matrix.psychopy_version }} --bids_version=latest --install_dir=/tmp_dir --force"
          $GITHUB_WORKSPACE/psychopy_linux_installer $ARGS | tee /tmp_dir/psychopy_install_output.log
        shell: bash

      - name: Extract PsychoPy start command
        id: extract-command
        continue-on-error: true
        run: |
          PSYCHOPY_COMMAND=$(tail -n 1 /tmp_dir/psychopy_install_output.log)
          if [[ ! "$PSYCHOPY_COMMAND" =~ .*/psychopy_.*_py_.*/bin/psychopy$ ]]; then
            echo "Invalid PsychoPy command format: $PSYCHOPY_COMMAND"
            exit 1
          fi
          sudo chmod -R 777 ${GITHUB_WORKSPACE}
          sudo chown -R $USER:$USER ${GITHUB_WORKSPACE}
          PYTHON_VENV="$(dirname "$PSYCHOPY_COMMAND")/python"

          echo "PYTHON_VENV command: $PYTHON_VENV"
          echo "PYTHON_VENV=$PYTHON_VENV" >> $GITHUB_ENV
          echo "PsychoPy start command: $PSYCHOPY_COMMAND"
          echo "PSYCHOPY_COMMAND=$PSYCHOPY_COMMAND" >> $GITHUB_ENV

      - name: Verify PsychoPy installation with --help
        id: verify-help
        continue-on-error: true
        run: ${{ env.PSYCHOPY_COMMAND }} -h
        shell: bash

      - name: Verify PsychoPy installation with --version
        id: verify-version
        continue-on-error: true
        run: |
          output=$(${{ env.PSYCHOPY_COMMAND }} -v 2>&1)
          echo "$output"
          version_line=$(echo "$output" | grep -E "PsychoPy3, version [0-9]+\.[0-9]+\.[0-9]+")
          if [ "$output" != "$version_line" ]; then
            echo "::error::PsychoPy version check failed"
            exit 1
          fi
        shell: bash

      - name: copy psychopy tests to tmp
        id: copy-tests
        run: |
          cp -rf $GITHUB_WORKSPACE/.github/PsychoPy_tests /tmp_dir/
      
      - name: run basic PsychoPy test
        id: psychopy-test
        continue-on-error: true
        run: |
          cd /tmp_dir/PsychoPy_tests
          ${{ env.PYTHON_VENV }} /tmp_dir/PsychoPy_tests/psychopy_test.py 2>&1 | tee /tmp_dir/PsychoPy_tests/psychopy_test.log
          set -e
          if ! tail -n 1 /tmp_dir/PsychoPy_tests/psychopy_test.log | grep -qE "Trial 3: Elapsed time .* seconds"; then
            echo "::error::PsychoPy test output verification failed"
            exit 1
          fi

      - name: Run extended PsychoPy Tests
        id: psychopy-test-extended
        continue-on-error: true
        run: |
          ${{ env.PYTHON_VENV }} /tmp_dir/PsychoPy_tests/psychopy_test_extended.py
          set -e
          if ! grep -qE "Visual Test Passed" /tmp_dir/PsychoPy_tests/psychopy_test_extended.log; then
            echo "::error::Visual Test Failed"
            exit 1
          fi
          # if ! grep -qE "Audio Test Passed" /tmp_dir/PsychoPy_tests/psychopy_test_extended.log; then
          #   echo "::error::Audio Test Failed"
          #   exit 1
          # fi
          if ! grep -qE "Keyboard Test Passed" /tmp_dir/PsychoPy_tests/psychopy_test_extended.log; then
            echo "::error::Keyboard Test Failed"
            exit 1
          fi
          if ! grep -qE "Image Test Passed" /tmp_dir/PsychoPy_tests/psychopy_test_extended.log; then
            echo "::error::Image Test Failed"
            exit 1
          fi
          if ! grep -qE "Timing Test Passed" /tmp_dir/PsychoPy_tests/psychopy_test_extended.log; then
            echo "::error::Timing Test Failed"
            exit 1
          fi
          echo "All tests passed successfully."

      - name: Verify BIDS installation simple
        id: verify-bids
        continue-on-error: true
        run: |
          cd /tmp_dir/PsychoPy_tests/BIDS
          set +e
          ${{ env.PYTHON_VENV }} /tmp_dir/PsychoPy_tests/BIDS/bids_test_simple.py 2>&1 | tee /tmp_dir/PsychoPy_tests/BIDS/output_simple.log
          exit_status=$?
          set -e
          if [ $exit_status -ne 0 ]; then
            echo "::error::BIDS simple test execution failed"
            exit 1
          fi
      
      - name: Verify BIDS installation exp_handler
        id: verify-bids-handler
        continue-on-error: true
        run: |
          cd /tmp_dir/PsychoPy_tests/BIDS
          set +e
          ${{ env.PYTHON_VENV }} /tmp_dir/PsychoPy_tests/BIDS/bids_test_exp_handler.py 2>&1 | tee /tmp_dir/PsychoPy_tests/BIDS/output_exp_handler.log
          exit_status=$?
          set -e
          if [ $exit_status -ne 0 ]; then
            echo "::error::BIDS exp_handler test execution failed"
            exit 1
          fi
        
      - name: Record result
        run: |
          STATUS="❌"
          if [[ "${{ steps.run-installer.outcome }}" == "success" && 
                "${{ steps.extract-command.outcome }}" == "success" && 
                "${{ steps.verify-help.outcome }}" == "success" && 
                "${{ steps.verify-version.outcome }}" == "success" && 
                "${{ steps.psychopy-test.outcome }}" == "success" && 
                "${{ steps.psychopy-test-extended.outcome }}" == "success" && 
                ( "${{ matrix.bids_version }}" == "None" || "${{ steps.verify-bids.outcome }}" == "success" ) && 
                ( "${{ matrix.bids_version }}" == "None" || "${{ steps.verify-bids-handler.outcome }}" == "success" ) ]]; then
            STATUS="✅"
          fi
      
          PSYCHOPY_VERSION_CLEAN=${{ env.PSYCHOPY_VERSION_CLEAN }}
      
          RESULT_FILE="/tmp_dir/result-${{ matrix.os }}-${{ matrix.python_version }}-${PSYCHOPY_VERSION_CLEAN}.md"
          echo "| ${{ matrix.os }} | ${{ matrix.python_version }} | $PSYCHOPY_VERSION_CLEAN | $STATUS |" >> $RESULT_FILE
          cat $RESULT_FILE
      
      - name: Upload result artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.os }}-${{ matrix.python_version }}-${{ env.PSYCHOPY_VERSION_CLEAN }}
          path: /tmp_dir/result-${{ matrix.os }}-${{ matrix.python_version }}-${{ env.PSYCHOPY_VERSION_CLEAN }}.md
      
      - name: cleanup paths
        run: |
          sudo rm -rf /tmp/*
          sudo rm -rf /tmp_dir
          sudo rm -rf ~/Desktop/*
          sudo rm -rf ~/.local/share/applications/*
          sudo rm -rf ~/.cache

  update-readme:
    needs: run-installer
    if: ${{ always() }}
    runs-on: [self-hosted, ubuntu-24.04]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Pull changes from remote
        run: |
          git fetch origin
          git reset --hard origin/${{ github.ref_name }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Create result table
        run: |
          current_date=$(date '+%Y-%m-%d')
          echo "### Report generated on $current_date" > results.md
          echo "### [Link to run results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> results.md
          echo "" >> results.md
          echo "| OS | Python Version | PsychoPy Version | Status |" >> results.md
          echo "|---|---|---|---|" >> results.md
          for file in ./artifacts/*.md; do
            cat "$file" >> results.md
          done

          # Sort the results by OS, Python Version, PsychoPy Version, and Status
          {
            head -n 4 results.md
            tail -n +5 results.md | sort -t'|' -k2,2 -k3,3 -k4,4 -k5,5
          } > sorted_results.md

          mv sorted_results.md results.md

      - name: Save results 
        run: |
          if [ -s results.md ]; then
            cp results.md .github/installation_results.md
          else
            echo "results.md is empty; skipping."
            exit 0
          fi
      
      - name: Commit and push changes
        run: |
          git add .github/installation_results.md
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Update installation results"
            git push --force
          fi
  
  
      - name: Check for failed statuses
        run: |
          if grep -q "❌" results.md && ! grep -q "✅" results.md; then
            echo "All entries failed or no successful entries found. Failing the job."
            exit 1
          fi