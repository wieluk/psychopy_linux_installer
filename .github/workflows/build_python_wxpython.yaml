name: Build Python/wxPython and upload to cloud
on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build_python_wxpython.yaml'

jobs:
  build:
    runs-on: [self-hosted, "${{ matrix.os }}"]
    strategy:
      matrix:
        os: [ubuntu-24.04 , ubuntu-22.04, ubuntu-20.04, debian-12, debian-11, fedora-39, fedora-40, pop-22.04, rocky-9.4, centos-9]
        python_version: ['3.8.19', '3.9.19', '3.10.14']
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install curl and python-pip
        run: |
          if command -v apt-get > /dev/null; then
            sudo apt-get update || true
            sudo apt-get install -y curl python3-pip
          elif command -v pacman > /dev/null; then
            sudo pacman -Syu --noconfirm
            sudo pacman -S --noconfirm curl python-pip
          elif command -v dnf > /dev/null; then
            sudo dnf check-update || true
            sudo dnf install -y curl python3-pip
          elif command -v yum > /dev/null; then
            sudo yum check-update || true
            sudo yum install -y curl python3-pip
          else
            echo "Unsupported package manager"
            exit 1
          fi
                  
      - name: create tmp
        run: |
          sudo rm -rf /tmp_dir
          sudo mkdir /tmp_dir
          sudo chmod -R 777 /tmp_dir
          sudo chown -R $USER:$USER /tmp_dir

      - name: Check if Python and wxPython files already exist
        id: check-files
        run: |
          PYTHON_VERSION="${{ matrix.python_version }}"
          OS_VERSION="${{ matrix.os }}"
          PYTHON_MAJOR="${PYTHON_VERSION%%.*}"
          PYTHON_MINOR="${PYTHON_VERSION#*.}"
          PYTHON_MINOR="${PYTHON_MINOR%%.*}"
          PROCESSOR_STRUCTURE=$(echo "$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m)")

          if ! command -v pip &> /dev/null; then
            python -m ensurepip --upgrade
          fi
          cd /tmp_dir
          pip download wxPython
          tarball=$(ls wxPython-*.tar.gz)
          tar -xzf "$tarball"
          
          LATEST_WXPYTHON_VERSION=$(echo "$tarball" | grep -oP '(?<=wxPython-)[0-9]+\.[0-9]+\.[0-9]+')
          FALLBACK_WXPYTHON_VERSION="4.1.1"
          NEXTCLOUD_URL="https://cloud.uni-graz.at/index.php/s/o4tnQgN6gjDs3CK/download?path=python-${PYTHON_VERSION}-${PROCESSOR_STRUCTURE}-${OS_VERSION}.tar.gz"
          
          WHEEL_NAME="wxPython-${LATEST_WXPYTHON_VERSION}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-${PROCESSOR_STRUCTURE}-${OS_VERSION}.whl"
          WHEEL_NAME_FALLBACK="wxPython-${FALLBACK_WXPYTHON_VERSION}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-${PROCESSOR_STRUCTURE}-${OS_VERSION}.whl"
          
          WX_PYTHON_NEXTCLOUD_URL="https://cloud.uni-graz.at/index.php/s/YtX33kbasHMZdgs/download?path=${WHEEL_NAME}"
          WX_PYTHON_NEXTCLOUD_URL_FALLBACK="https://cloud.uni-graz.at/index.php/s/YtX33kbasHMZdgs/download?path=${WHEEL_NAME_FALLBACK}"
          
          PYTHON_EXISTS=false
          WXPYTHON_EXISTS=false

          if curl -f -X GET "${NEXTCLOUD_URL}" --output /dev/null; then
            PYTHON_EXISTS=true
          fi

          if curl -f -X GET "${WX_PYTHON_NEXTCLOUD_URL}" --output /dev/null; then
            WXPYTHON_EXISTS=true
            WX_PYTHON_VERSION=$LATEST_WXPYTHON_VERSION
          elif curl -f -X GET "${WX_PYTHON_NEXTCLOUD_URL_FALLBACK}" --output /dev/null; then
            WXPYTHON_EXISTS=true
            WX_PYTHON_VERSION=$FALLBACK_WXPYTHON_VERSION
          fi

          if [ "$PYTHON_EXISTS" = true ] && [ "$WXPYTHON_EXISTS" = true ]; then
            echo "Both files exist. Skipping the process."
            echo "skip_process=true" >> $GITHUB_ENV
            RESULT_FILE="/tmp_dir/result-${{ matrix.os }}-${{ matrix.python_version }}-${WX_PYTHON_VERSION}.md"
            echo "| ${{ matrix.os }} | ${{ matrix.python_version }} | $WX_PYTHON_VERSION |" >> $RESULT_FILE
            cat $RESULT_FILE   
          else
            echo "One or both files do not exist. Continuing with the process."
            echo "skip_process=false" >> $GITHUB_ENV
          fi

          echo "PROCESSOR_STRUCTURE=$PROCESSOR_STRUCTURE" >> $GITHUB_ENV
          echo "WXPYTHON_VERSION=$WX_PYTHON_VERSION" >> $GITHUB_ENV
          echo "FALLBACK_WXPYTHON_VERSION=$FALLBACK_WXPYTHON_VERSION" >> $GITHUB_ENV
          
      - name: Set up dependencies
        if: env.skip_process == 'false'
        run: |
          if command -v apt-get > /dev/null; then
            sudo apt-get update || true
            packages=(
              git curl jq python3-pip python3-dev libgtk-3-dev libwebkit2gtk-4.0-dev libxcb-xinerama0 
              libegl1-mesa-dev python3-venv libsdl2-dev libglu1-mesa-dev libusb-1.0-0-dev portaudio19-dev 
              libasound2-dev build-essential libssl-dev zlib1g-dev libsqlite3-dev libffi-dev libbz2-dev 
              libreadline-dev xz-utils libjpeg-dev libpng-dev gstreamer1.0-plugins-base gstreamer1.0-tools 
              gstreamer1.0-x freeglut3-dev libtiff-dev libnotify-dev libsm-dev
            )
            for pkg in "${packages[@]}"; do
              sudo apt-get install -y "$pkg" || true
            done
          elif command -v pacman > /dev/null; then
            sudo pacman -Syu --noconfirm || true
            packages=(
                git curl jq python-dev python gtk3 webkit2gtk libxcb mesa sdl2 glu 
                libusb portaudio alsa-lib base-devel openssl zlib sqlite libffi bzip2 
                readline xz libjpeg libpng libsm gstreamer gstreamer-base freeglut 
                libtiff libnotify
            )
            for pkg in "${packages[@]}"; do
              sudo pacman -S --noconfirm "$pkg" || true
            done
          elif command -v dnf > /dev/null; then
            sudo dnf check-update || true
            packages=(
              git curl jq python3-devel python3-pip gtk3-devel webkit2gtk3-devel libxcb-xinerama 
              mesa-libEGL-devel SDL2-devel mesa-libGLU-devel libusb1-devel portaudio-devel alsa-lib-devel 
              gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel readline-devel 
              xz-devel libjpeg-devel libpng-devel libSM-devel gcc-c++ gstreamer1-plugins-base 
              gstreamer1-devel freeglut-devel libjpeg-turbo-devel libtiff-devel libnotify-devel
            )
            for pkg in "${packages[@]}"; do
              sudo dnf install -y "$pkg" || true
            done
          elif command -v yum > /dev/null; then
            sudo yum check-update || true
            packages=(
              git curl jq python3-devel python3-pip gtk3-devel webkit2gtk3-devel libxcb-xinerama 
              mesa-libEGL-devel SDL2-devel mesa-libGLU-devel libusb1-devel portaudio-devel alsa-lib-devel 
              gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel readline-devel 
              xz-devel libjpeg-devel libpng-devel libSM-devel gcc-c++ gstreamer1-plugins-base 
              gstreamer1-devel freeglut-devel libjpeg-turbo-devel libtiff-devel libnotify-devel
            )
            for pkg in "${packages[@]}"; do
              sudo yum install -y "$pkg" || true
            done
          else
            echo "Unsupported package manager"
            exit 1
          fi

      - name: Download, make and upload Python
        if: env.skip_process == 'false'
        id: build-python
        continue-on-error: true
        run: |
          cd /tmp_dir
          PYTHON_VERSION="${{ matrix.python_version }}"
          curl -O "https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz"
          tar -xf "Python-${PYTHON_VERSION}.tgz"
          cd "Python-${PYTHON_VERSION}"
          ./configure --enable-optimizations
          make -j "$(nproc)"
          sudo make altinstall

          FILE_PATH="/tmp_dir/python-${PYTHON_VERSION}-${{ env.PROCESSOR_STRUCTURE }}-${{ matrix.os }}.tar.gz"
          tar -czvf "$FILE_PATH" -C "/tmp_dir/Python-${PYTHON_VERSION}/" .
          echo "uploading $FILE_PATH to Nextcloud."
          curl -T "$FILE_PATH" -u "${{ secrets.NEXTCLOUD_ID_PYTHON }}:${{ secrets.NEXTCLOUD_PASS_PYTHON }}" -H "X-Requested-With: XMLHttpRequest" "https://cloud.uni-graz.at/public.php/webdav/"

      - name: Download, build and upload wxPython
        id: build-wxpython
        if: env.skip_process == 'false'
        continue-on-error: true
        run: |
          PYTHON_VERSION="${{ matrix.python_version }}"
          SHORT_PYTHON_VERSION="${PYTHON_VERSION%.*}"
          PYTHON_BIN="python${SHORT_PYTHON_VERSION}"
          $PYTHON_BIN -m venv /tmp_dir/venv
          source /tmp_dir/venv/bin/activate
          pip install --upgrade pip
          pip install wheel
          mkdir /tmp_dir/wxpython
          cd /tmp_dir/wxpython
          
          # Download wxPython
          pip download wxPython
          tarball=$(ls wxPython-*.tar.gz)
          tar -xzf "$tarball"
          wxpython_version=$(echo "$tarball" | grep -oP '(?<=wxPython-)[0-9]+\.[0-9]+\.[0-9]+')
          wxPython_dir=$(find . -type d -name "wxPython-*")
          cd "$wxPython_dir"
          pip install -U pip distro sip six
          
          if pip wheel .; then
              echo "Successfully built wxPython version $wxpython_version."
          else
              cd /tmp
              rm -rf  /tmp_dir/wxpython*
              mkdir /tmp_dir/wxpython
              cd /tmp_dir/wxpython
              
              echo "Error: Building wxPython version $wxpython_version failed. Attempting to use a fallback version ${{ env.FALLBACK_WXPYTHON_VERSION}}."
              wxpython_version=${{ env.FALLBACK_WXPYTHON_VERSION}}
              
              pip download "wxPython==$wxpython_version"
              
              tarball=$(ls wxPython-*.tar.gz)
              tar -xzf "$tarball"
                  
              wxPython_dir=$(find . -type d -name "wxPython-*")
              cd "$wxPython_dir"
              
              if pip wheel .; then
                  echo "Successfully built wxPython version $wxpython_version as a fallback."
              else
                  echo "Error: Fallback version $wxpython_version also failed to build. Exiting."
                  exit 1 
              fi
          fi
                    
          # Rename and upload the wheel file
          python_major=$(python -c "import sys; print(sys.version_info.major)")
          python_minor=$(python -c "import sys; print(sys.version_info.minor)")
          wheel_file=$(ls wxPython-*.whl)
          identified_wheel_file="/tmp_dir/wxPython-${wxpython_version}-cp${python_major}${python_minor}-cp${python_major}${python_minor}-${{ env.PROCESSOR_STRUCTURE }}-${{ matrix.os }}.whl"
          cp "$wheel_file" "$identified_wheel_file"
          deactivate
          echo "uploading $identified_wheel_file to Nextcloud."
          curl -T "$identified_wheel_file" -u "${{ secrets.NEXTCLOUD_ID_WXPYTHON }}:${{ secrets.NEXTCLOUD_PASS_WXPYTHON }}" -H "X-Requested-With: XMLHttpRequest" "https://cloud.uni-graz.at/public.php/webdav/"
          echo "WXPYTHON_VERSION=$wxpython_version" >> $GITHUB_ENV

      - name: Create and Record Result Table
        if: env.skip_process == 'false'
        run: |
          # Default to failure indicators
          PYTHON_STATUS="❌"
          WXPYTHON_STATUS="❌"
          
          # Check if the relevant steps succeeded and update status accordingly
          if [[ "${{ steps.build-python.outcome }}" == "success" ]]; then
            PYTHON_STATUS="${{ matrix.python_version }}"
          fi
          
          if [[ "${{ steps.build-wxpython.outcome }}" == "success" ]]; then
            WXPYTHON_STATUS="${{ env.WXPYTHON_VERSION }}"
          fi
          
          # Output the result to a file
          RESULT_FILE="/tmp_dir/result-${{ matrix.os }}-${{ matrix.python_version }}-${{ env.WXPYTHON_VERSION }}.md"
          echo "| ${{ matrix.os }} | $PYTHON_STATUS | $WXPYTHON_STATUS |" >> $RESULT_FILE
          
          # Display the content of the result file
          cat $RESULT_FILE

      - name: Upload result artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.os }}-${{ matrix.python_version }}-${{ env.WXPYTHON_VERSION }}
          path: /tmp_dir/result-${{ matrix.os }}-${{ matrix.python_version }}-${{ env.WXPYTHON_VERSION }}.md

      - name: clean up
        run: |
          sudo rm -rf /tmp_dir
          rm -rf ~/.cache
          sudo rm -rf /tmp/*
          

  update-readme:
    needs: build
    if: ${{ always() }}
    runs-on: [self-hosted, ubuntu-24.04]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Pull changes from remote
        run: |
          git fetch origin
          git reset --hard origin/${{ github.ref_name }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: Create result table
        run: |
          current_date=$(date '+%Y-%m-%d')
          echo "### Report generated on $current_date" > results.md
          echo "### [Link to run results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> results.md
          echo "" >> results.md
          echo "| OS | Python Version | WxPython Version |" >> results.md
          echo "|---|---|---|" >> results.md
          for file in ./artifacts/*.md; do
            cat "$file" >> results.md
          done

          # Sort the results by OS, Python Version, PsychoPy Version, BIDS Version, and Status
          {
            head -n 4 results.md
            tail -n +5 results.md | sort -t'|' -k2,2 -k3,3 -k4,4
          } > sorted_results.md

          mv sorted_results.md results.md

      - name: Save results 
        run: |
          if [ -s results.md ]; then
            cp results.md .github/build_results.md
          else
            echo "results.md is empty; skipping."
            exit 0
          fi
      
      - name: Commit and push changes
        run: |
          git add .github/build_results.md
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Update installation results"
            git push --force
          fi
