name: Build Python/wxPython and upload to cloud

on:
  push:
    branches: [main, dev]
    paths: ['.github/workflows/build_python_wxpython.yaml']
  workflow_dispatch:

jobs:
  build:
    runs-on: [self-hosted, "${{ matrix.os }}"]
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04, ubuntu-20.04, debian-12, debian-11, fedora-39, fedora-40, pop-22.04, rocky-9.4, centos-9, manjarolinux-24, opensuse-leap-15.6, linuxmint-22]
        python_version: ['3.8', '3.9', '3.10']
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment and install dependencies
        run: |
          sudo rm -rf /tmp_dir ~/.cache/pip && sudo mkdir /tmp_dir && sudo chmod -R 777 /tmp_dir && sudo chown -R $USER:$(id -gn $USER) /tmp_dir
          if command -v apt-get > /dev/null; then
            sudo apt-get update || true
            sudo apt-get install -y curl
          elif command -v pacman > /dev/null; then
            sudo pacman -Sy --noconfirm
            sudo pacman -S --noconfirm curl
          elif command -v dnf > /dev/null; then
            sudo dnf check-update || true
            sudo dnf install -y curl
          elif command -v yum > /dev/null; then
            sudo yum check-update || true
            sudo yum install -y curl
          elif command -v zypper > /dev/null; then
            sudo zypper refresh || true
            sudo zypper install -y curl
          else
            echo "Unsupported package manager"
            exit 1
          fi

      - name: Check existing files and set variables
        id: check-files
        run: |
          major_minor_version="${{ matrix.python_version }}"
          official_base_url="https://www.python.org/ftp/python/"
          latest_patch_version=$(curl -s "${official_base_url}" | grep -oP "${major_minor_version}\.[0-9]+/" | sort -V | tail -n 1 | sed 's:/$::')
          PYTHON_VERSION="${latest_patch_version}"
          
          detect_os_version() {
              if [ -f /etc/os-release ]; then
                  . /etc/os-release
                  if [ -n "$ID" ] && [ -n "$VERSION_ID" ]; then
                      echo "$ID-$VERSION_ID"
                      return
                  fi
              fi

              if command -v lsb_release > /dev/null 2>&1; then
                  version=$(lsb_release -sr | cut -d. -f1)
                  echo "$(lsb_release -si)-$version"
                  return
              fi

              if [ -f /etc/lsb-release ]; then
                  . /etc/lsb-release
                  version=$(echo "$DISTRIB_RELEASE" | cut -d. -f1)
                  echo "${DISTRIB_ID}-$version"
                  return
              fi

              if [ -f /etc/debian_version ]; then
                  version=$(cut -d. -f1 < /etc/debian_version)
                  echo "debian-$version"
                  return
              fi

              if [ -f /etc/redhat-release ]; then
                  version=$(sed 's/.*release \([0-9]*\).*/\1/' < /etc/redhat-release)
                  echo "$(sed 's/release [0-9]*.*//' < /etc/redhat-release)$version"
                  return
              fi

              exit 1
          }

          OS_VERSION=$(detect_os_version | tr '[:upper:]' '[:lower:]')
          PROCESSOR_STRUCTURE=$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m)
          PYTHON_MAJOR=$(echo "${PYTHON_VERSION}" | cut -d. -f1)
          PYTHON_MINOR=$(echo "${PYTHON_VERSION}" | cut -d. -f2)
      
          WXPYTHON_VERSION=$(curl -s "https://pypi.org/pypi/wxPython/json" | jq -r .info.version)
          if [ -z "$WXPYTHON_VERSION" ]; then
            echo "Unable to fetch the latest version for wxPython. Exiting." >&2
            exit 1
          fi
      
          PYTHON_TARBALL_URL="https://cloud.uni-graz.at/index.php/s/o4tnQgN6gjDs3CK/download?path=python-${PYTHON_VERSION}-${PROCESSOR_STRUCTURE}-${OS_VERSION}.tar.gz"
          WXPYTHON_WHEEL_NAME="wxPython-${WXPYTHON_VERSION}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-${PROCESSOR_STRUCTURE}-${OS_VERSION}.whl"
          WXPYTHON_WHEEL_URL="https://cloud.uni-graz.at/index.php/s/YtX33kbasHMZdgs/download?path=${WXPYTHON_WHEEL_NAME}"
      
          PYTHON_EXISTS=false
          WXPYTHON_EXISTS=false
      
          curl -I -f "${PYTHON_TARBALL_URL}" --output /dev/null && PYTHON_EXISTS=true
          curl -I -f "${WXPYTHON_WHEEL_URL}" --output /dev/null && WXPYTHON_EXISTS=true
   
          if [ "$PYTHON_EXISTS" = true ] && [ "$WXPYTHON_EXISTS" = true ]; then
            echo "SKIP_PROCESS=true" >> $GITHUB_ENV
            
            RESULT_FILE="/tmp_dir/result-${{ matrix.os }}-${PYTHON_VERSION}-${WXPYTHON_VERSION}.md"
            echo "| ${{ matrix.os }} | $PYTHON_VERSION | $WXPYTHON_VERSION |" >> $RESULT_FILE
            
            PYTHON_FILENAME_FILE="/tmp_dir/python-${PYTHON_VERSION}-${PROCESSOR_STRUCTURE}-${{ matrix.os }}.txt"
            echo "python-${PYTHON_VERSION}-${PROCESSOR_STRUCTURE}-${{ matrix.os }}.tar.gz" >> $PYTHON_FILENAME_FILE
          else
            echo "SKIP_PROCESS=false" >> $GITHUB_ENV
          fi

          echo "PROCESSOR_STRUCTURE=${PROCESSOR_STRUCTURE}" >> $GITHUB_ENV
          echo "WXPYTHON_VERSION=${WXPYTHON_VERSION}" >> $GITHUB_ENV
          echo "OS_VERSION=${OS_VERSION}" >> $GITHUB_ENV
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> $GITHUB_ENV

      - name: Set up dependencies
        if: env.SKIP_PROCESS == 'false'
        run: |
          if command -v apt-get > /dev/null; then
            sudo apt-get update || true
            packages=(
              git curl jq python3-pip python3-dev libgtk-3-dev libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libxcb-xinerama0 
              libegl1-mesa-dev python3-venv libsdl2-dev libglu1-mesa-dev libusb-1.0-0-dev portaudio19-dev 
              libasound2-dev build-essential libssl-dev zlib1g-dev libsqlite3-dev libffi-dev libbz2-dev 
              libreadline-dev xz-utils libjpeg-dev libpng-dev gstreamer1.0-plugins-base gstreamer1.0-tools 
              gstreamer1.0-x freeglut3-dev libtiff-dev libnotify-dev libsm-dev make
            )
            for pkg in "${packages[@]}"; do
              sudo apt-get install -y "$pkg" || true
            done
          elif command -v pacman > /dev/null; then
            sudo pacman -Syu --noconfirm || true
            packages=(
                git curl jq python-dev python gtk3 webkit2gtk libxcb mesa sdl2 glu 
                libusb portaudio alsa-lib base-devel openssl zlib sqlite libffi bzip2 
                readline xz libjpeg libpng libsm gstreamer gstreamer-base freeglut 
                libtiff libnotify make
            )
            for pkg in "${packages[@]}"; do
              sudo pacman -S --noconfirm "$pkg" || true
            done
          elif command -v dnf > /dev/null; then
            sudo dnf check-update || true
            packages=(
              git curl jq python3-devel python3-pip gtk3-devel webkit2gtk3-devel libxcb-xinerama 
              mesa-libEGL-devel SDL2-devel mesa-libGLU-devel libusb1-devel portaudio-devel alsa-lib-devel 
              gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel readline-devel 
              xz-devel libjpeg-devel libpng-devel libSM-devel gcc-c++ gstreamer1-plugins-base 
              gstreamer1-devel freeglut-devel libjpeg-turbo-devel libtiff-devel libnotify-devel make
            )
            for pkg in "${packages[@]}"; do
              sudo dnf install -y "$pkg" || true
            done
          elif command -v yum > /dev/null; then
            sudo yum check-update || true
            packages=(
              git curl jq python3-devel python3-pip gtk3-devel webkit2gtk3-devel libxcb-xinerama 
              mesa-libEGL-devel SDL2-devel mesa-libGLU-devel libusb1-devel portaudio-devel alsa-lib-devel 
              gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel readline-devel 
              xz-devel libjpeg-devel libpng-devel libSM-devel gcc-c++ gstreamer1-plugins-base 
              gstreamer1-devel freeglut-devel libjpeg-turbo-devel libtiff-devel libnotify-devel make
            )
            for pkg in "${packages[@]}"; do
              sudo yum install -y "$pkg" || true
            done
          elif command -v zypper > /dev/null; then
            sudo zypper refresh || true
            packages=(
              git curl jq python3-pip python3-devel gtk3-devel webkit2gtk3-devel libxcb1 libxcb-xinerama0 
              Mesa-libEGL-devel SDL2-devel Mesa-libGLU-devel libusb-1_0-devel portaudio-devel alsa-devel 
              gcc-c++ libopenssl-devel libbz2-devel libffi-devel zlib-devel sqlite3-devel readline-devel 
              xz-devel libjpeg-devel libpng16-compat-devel libSM-devel gstreamer-plugins-base-devel 
              gstreamer-devel freeglut-devel libtiff-devel libnotify-devel make
            )
            for pkg in "${packages[@]}"; do
              sudo zypper install -y "$pkg" || true
            done
          else
            echo "Unsupported package manager"
            exit 1
          fi

      - name: Download, make and upload Python
        if: env.SKIP_PROCESS == 'false'
        id: build-python
        continue-on-error: true
        run: |
          cd /tmp_dir
          curl -O "https://www.python.org/ftp/python/${{ env.PYTHON_VERSION }}/Python-${{ env.PYTHON_VERSION }}.tgz"
          tar -xf "Python-${{ env.PYTHON_VERSION }}.tgz"
          cd "Python-${{ env.PYTHON_VERSION }}"
          ./configure --enable-optimizations --with-ensurepip=install --prefix=/usr/local/psychopy_python
          make -j "$(nproc)"
          
          PYTHON_TARBALL_PATH="/tmp_dir/python-${{ env.PYTHON_VERSION }}-${{ env.PROCESSOR_STRUCTURE }}-${{ matrix.os }}.tar.gz"
          tar -czvf "$PYTHON_TARBALL_PATH" -C "/tmp_dir/Python-${{ env.PYTHON_VERSION }}/" .
          curl -T "$PYTHON_TARBALL_PATH" -u "${{ secrets.NEXTCLOUD_ID_PYTHON }}:${{ secrets.NEXTCLOUD_PASS_PYTHON }}" -H "X-Requested-With: XMLHttpRequest" "https://cloud.uni-graz.at/public.php/webdav/"
          
          PYTHON_FILENAME_FILE="/tmp_dir/python-${{ env.PYTHON_VERSION }}-${{ env.PROCESSOR_STRUCTURE }}-${{ matrix.os }}.txt"
          echo "python-${{ env.PYTHON_VERSION }}-${{ env.PROCESSOR_STRUCTURE }}-${{ matrix.os }}.tar.gz" >> $PYTHON_FILENAME_FILE
          
          sudo make altinstall 
      - name: Upload Python Filenames Artifact
        if: env.SKIP_PROCESS == 'true' || steps.build-python.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: python-${{ env.PYTHON_VERSION }}-${{ env.PROCESSOR_STRUCTURE }}-${{ matrix.os }}
          path: /tmp_dir/python-${{ env.PYTHON_VERSION }}-${{ env.PROCESSOR_STRUCTURE }}-${{ matrix.os }}.txt
      

      
      - name: Build and upload wxPython
        if: env.SKIP_PROCESS == 'false'
        id: build-wxpython
        continue-on-error: true
        run: |
          export PATH=/usr/local/psychopy_python/bin:$PATH
          /usr/local/psychopy_python/bin/python${{ matrix.python_version }} -m venv /tmp_dir/psychopy_venv
          source /tmp_dir/psychopy_venv/bin/activate
          
          mkdir /tmp_dir/wxpython && cd /tmp_dir/wxpython
          pip install -U pip distro sip six setuptools wheel

          pip download wxPython
          WXPYTHON_TARBALL=$(ls wxPython-*.tar.gz)
          tar -xzf "$WXPYTHON_TARBALL"
          WXPYTHON_VERSION=$(echo "$WXPYTHON_TARBALL" | grep -oP '(?<=wxPython-)[0-9]+\.[0-9]+\.[0-9]+')
          WXPYTHON_DIR=$(find . -type d -name "wxPython-*")
          cd "$WXPYTHON_DIR"
          
          # Use the specific Python version for building wxPython
          python --version
          python -m pip wheel .
                    
          PYTHON_MAJOR=$(python -c "import sys; print(sys.version_info.major)")
          PYTHON_MINOR=$(python -c "import sys; print(sys.version_info.minor)")
          WXPYTHON_WHEEL=$(ls wxPython-*.whl)
          WXPYTHON_IDENTIFIED_WHEEL="/tmp_dir/wxPython-${WXPYTHON_VERSION}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-cp${PYTHON_MAJOR}${PYTHON_MINOR}-${{ env.PROCESSOR_STRUCTURE }}-${{ env.OS_VERSION }}.whl"
          cp "$WXPYTHON_WHEEL" "$WXPYTHON_IDENTIFIED_WHEEL"
          
          deactivate
          curl -T "$WXPYTHON_IDENTIFIED_WHEEL" -u "${{ secrets.NEXTCLOUD_ID_WXPYTHON }}:${{ secrets.NEXTCLOUD_PASS_WXPYTHON }}" -H "X-Requested-With: XMLHttpRequest" "https://cloud.uni-graz.at/public.php/webdav/"
          echo "WXPYTHON_VERSION=$WXPYTHON_VERSION" >> $GITHUB_ENV

      - name: Create and Record Result Table
        if: env.SKIP_PROCESS == 'false'
        run: |
          PYTHON_STATUS="❌"
          WXPYTHON_STATUS="❌"
          
          if [[ "${{ steps.build-python.outcome }}" == "success" ]]; then
            PYTHON_STATUS="${{ env.PYTHON_VERSION }}"
          fi
          
          if [[ "${{ steps.build-wxpython.outcome }}" == "success" ]]; then
            WXPYTHON_STATUS="${{ env.WXPYTHON_VERSION }}"
          fi
          
          RESULT_FILE="/tmp_dir/result-${{ matrix.os }}-${{ env.PYTHON_VERSION }}-${{ env.WXPYTHON_VERSION }}.md"
          echo "| ${{ matrix.os }} | $PYTHON_STATUS | $WXPYTHON_STATUS |" >> $RESULT_FILE
          
          cat $RESULT_FILE

      - name: Upload result artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.os }}-${{ env.PYTHON_VERSION }}-${{ env.WXPYTHON_VERSION }}
          path: /tmp_dir/result-${{ matrix.os }}-${{ env.PYTHON_VERSION }}-${{ env.WXPYTHON_VERSION }}.md

      - name: Cleanup
        if: always()
        run: |
          sudo rm -rf /tmp_dir ~/.cache/pip /usr/local/psychopy_python

  update-readme:
    needs: build
    if: ${{ failure() || success() }}
    runs-on: [self-hosted, ubuntu-24.04]
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git and download artifacts
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git fetch origin && git reset --hard origin/${{ github.ref_name }}

      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts/results
          pattern: 'result*'
          merge-multiple: true

      - name: Create and save result table
        run: |
          cat << EOF > results.md
          ### Report generated on $(date '+%Y-%m-%d')
          ### [Link to run results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          | OS | Python Version | WxPython Version |
          |---|---|---|
          EOF

          cat ./artifacts/results/*.md | sort -t'|' -k2,2 -k3,3 -k4,4 >> results.md

          if [ -s results.md ]; then
            cp results.md .github/build_results.md
          else
            echo "::warning::results.md is empty; skipping save."
          fi
      
      - name: Commit and push changes
        run: |
          git add -f .github/build_results.md
          git diff-index --quiet HEAD || (git commit -m "Update cloud build results" && git push --force)
      
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts/python
          pattern: 'python*'
          merge-multiple: true

      - name: Update Python version index (python_versions.txt)
        run: |
          INDEX_FILE="python_versions.txt"
          touch "$INDEX_FILE"
          cat ./artifacts/python/*.txt >> "$INDEX_FILE"

          curl -T "$INDEX_FILE" -u "${{ secrets.NEXTCLOUD_ID_PYTHON }}:${{ secrets.NEXTCLOUD_PASS_PYTHON }}" -H "X-Requested-With: XMLHttpRequest" "https://cloud.uni-graz.at/public.php/webdav/"

