name: reusable copy release assets

on:
  workflow_call:

jobs:
  copy-assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Copy assets from previous release to current release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail

          fetch_all_assets() {
            local repo="$1"
            local release_id="$2"
            local token="$3"
            local page=1
            local assets="[]"
            while :; do
              response=$(curl -s -H "Authorization: token $token" \
                "https://api.github.com/repos/$repo/releases/$release_id/assets?per_page=100&page=$page")
              count=$(echo "$response" | jq 'length')
              assets=$(echo "$assets $response" | jq -s 'add')
              if [ "$count" -lt 100 ]; then
                break
              fi
              page=$((page+1))
            done
            echo "$assets"
          }

          INSTALLER_VERSION=$(./psychopy_linux_installer --version)
          RELEASE_TAG="v${INSTALLER_VERSION}"

          # Get all releases
          RELEASES=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")

          # Find previous release (not current), ignore drafts/prereleases
          PREV_RELEASE=$(echo "$RELEASES" | jq 'map(select(.tag_name != "'"$RELEASE_TAG"'" and .draft==false and .prerelease==false)) | sort_by(.published_at) | reverse | .[0]')
          PREV_ID=$(echo "$PREV_RELEASE" | jq -r '.id')
          PREV_TAG=$(echo "$PREV_RELEASE" | jq -r '.tag_name')

          # Find current release
          CUR_RELEASE=$(echo "$RELEASES" | jq 'map(select(.tag_name == "'"$RELEASE_TAG"'")) | .[0]')
          CUR_ID=$(echo "$CUR_RELEASE" | jq -r '.id')
          UPLOAD_URL=$(echo "$CUR_RELEASE" | jq -r '.upload_url' | sed 's/{?name,label}//')

          # Fetch all assets for previous and current releases
          PREV_ASSETS_JSON=$(fetch_all_assets "$GITHUB_REPOSITORY" "$PREV_ID" "$GITHUB_TOKEN")
          CUR_ASSETS_JSON=$(fetch_all_assets "$GITHUB_REPOSITORY" "$CUR_ID" "$GITHUB_TOKEN")

          EXISTING_ASSETS=$(echo "$CUR_ASSETS_JSON" | jq -r '.[].name')

          # Transfer any missing assets from the previous release
          echo "$PREV_ASSETS_JSON" | jq -r '.[] | [.name, .browser_download_url] | @tsv' | while IFS=$'\t' read -r name url; do
            if echo "$EXISTING_ASSETS" | grep -qx "$name"; then
              echo "Skipping $name (already exists in current release)"
              continue
            fi
            echo "Transferring asset: $name"
            curl --retry 3 --retry-delay 2 -sSfL -H "Authorization: token $GITHUB_TOKEN" "$url" \
              | curl --retry 3 --retry-delay 2 -sSf -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/octet-stream" \
                --data-binary @- "$UPLOAD_URL?name=$name"
          done

          # Re-fetch to verify
          CUR_ASSETS_JSON=$(fetch_all_assets "$GITHUB_REPOSITORY" "$CUR_ID" "$GITHUB_TOKEN")
          CUR_ASSETS=$(echo "$CUR_ASSETS_JSON" | jq -r '.[].name' | sort)
          PREV_ASSETS=$(echo "$PREV_ASSETS_JSON" | jq -r '.[].name' | sort)

          MISSING_ASSETS=$(comm -23 <(echo "$PREV_ASSETS") <(echo "$CUR_ASSETS"))

          if [ -z "$MISSING_ASSETS" ]; then
            echo "All assets from previous release are present in the current release."
          else
            echo "Missing assets in current release:"
            echo "$MISSING_ASSETS"
            exit 1
          fi
