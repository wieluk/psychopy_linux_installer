name: reusable copy release assets
on:
  workflow_call:
jobs:
  copy-assets:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Copy assets from previous release to current release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          set -e
          
          # Function to fetch all assets with pagination
          fetch_all_assets() {
            local repo="$1"
            local release_id="$2"
            local token="$3"
            local page=1
            local assets="[]"
            while :; do
              local response
              # Add retry logic for API calls
              for retry in {1..5}; do
                response=$(curl -s -w "\n%{http_code}" -H "Authorization: token $token" \
                  "https://api.github.com/repos/$repo/releases/$release_id/assets?per_page=100&page=$page")
                http_code=$(echo "$response" | tail -n1)
                response_body=$(echo "$response" | sed '$d')
                
                if [ "$http_code" -eq 200 ]; then
                  break
                elif [ "$http_code" -eq 403 ] && [ "$retry" -lt 5 ]; then
                  # Check if we're rate limited
                  reset_time=$(curl -s -I -H "Authorization: token $token" "https://api.github.com/rate_limit" | grep "x-ratelimit-reset" | cut -d: -f2- | tr -d ' \r')
                  current_time=$(date +%s)
                  if [ -n "$reset_time" ] && [ "$reset_time" -gt "$current_time" ]; then
                    wait_time=$((reset_time - current_time + 5))
                    echo "Rate limited. Waiting for $wait_time seconds..."
                    sleep $wait_time
                  else
                    echo "HTTP 403 error, waiting 30 seconds before retry..."
                    sleep 30
                  fi
                elif [ "$retry" -lt 5 ]; then
                  echo "HTTP error $http_code, waiting 10 seconds before retry..."
                  sleep 10
                else
                  echo "Failed to fetch assets after 5 retries. HTTP code: $http_code"
                  echo "Response: $response_body"
                  exit 1
                fi
              done
              
              count=$(echo "$response_body" | jq 'length')
              assets=$(echo "$assets $response_body" | jq -s 'add')
              if [ "$count" -lt 100 ]; then
                break
              fi
              page=$((page+1))
            done
            echo "$assets"
          }
          
          # Function to upload an asset with retries
          upload_asset() {
            local upload_url="$1"
            local name="$2"
            local data="$3"
            local token="$4"
            
            for retry in {1..5}; do
              response=$(echo "$data" | curl -s -w "\n%{http_code}" -H "Authorization: token $token" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @- "$upload_url?name=$name")
              
              http_code=$(echo "$response" | tail -n1)
              response_body=$(echo "$response" | sed '$d')
              
              if [ "$http_code" -eq 201 ]; then
                echo "Successfully uploaded $name"
                return 0
              elif [ "$http_code" -eq 403 ] && [ "$retry" -lt 5 ]; then
                # Check if we're rate limited
                reset_time=$(curl -s -I -H "Authorization: token $token" "https://api.github.com/rate_limit" | grep "x-ratelimit-reset" | cut -d: -f2- | tr -d ' \r')
                current_time=$(date +%s)
                if [ -n "$reset_time" ] && [ "$reset_time" -gt "$current_time" ]; then
                  wait_time=$((reset_time - current_time + 5))
                  echo "Rate limited. Waiting for $wait_time seconds..."
                  sleep $wait_time
                else
                  echo "HTTP 403 error for $name, waiting 30 seconds before retry..."
                  sleep 30
                fi
              elif [ "$retry" -lt 5 ]; then
                echo "HTTP error $http_code for $name, waiting 10 seconds before retry..."
                sleep 10
              else
                echo "Failed to upload $name after 5 retries. HTTP code: $http_code"
                echo "Response: $response_body"
                return 1
              fi
            done
          }
          
          INSTALLER_VERSION=$(./psychopy_linux_installer --version)
          RELEASE_TAG="v${INSTALLER_VERSION}"
          
          # Get all releases with retry
          for retry in {1..5}; do
            RELEASES=$(curl -s -w "\n%{http_code}" -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases")
            http_code=$(echo "$RELEASES" | tail -n1)
            RELEASES_BODY=$(echo "$RELEASES" | sed '$d')
            
            if [ "$http_code" -eq 200 ]; then
              break
            elif [ "$retry" -lt 5 ]; then
              echo "HTTP error $http_code, waiting 10 seconds before retry..."
              sleep 10
            else
              echo "Failed to fetch releases after 5 retries"
              exit 1
            fi
          done
          
          # Find previous release (not current)
          PREV_RELEASE=$(echo "$RELEASES_BODY" | jq 'map(select(.tag_name != "'"$RELEASE_TAG"'")) | sort_by(.created_at) | reverse | .[0]')
          PREV_ID=$(echo "$PREV_RELEASE" | jq -r '.id')
          PREV_TAG=$(echo "$PREV_RELEASE" | jq -r '.tag_name')
          
          # Find current release
          CUR_RELEASE=$(echo "$RELEASES_BODY" | jq 'map(select(.tag_name == "'"$RELEASE_TAG"'")) | .[0]')
          CUR_ID=$(echo "$CUR_RELEASE" | jq -r '.id')
          UPLOAD_URL=$(echo "$CUR_RELEASE" | jq -r '.upload_url' | sed 's/{?name,label}//')
          
          echo "Previous release: $PREV_TAG (ID: $PREV_ID)"
          echo "Current release: $RELEASE_TAG (ID: $CUR_ID)"
          
          # Fetch all assets for previous and current releases (with pagination)
          echo "Fetching assets from previous release..."
          PREV_ASSETS_JSON=$(fetch_all_assets "$GITHUB_REPOSITORY" "$PREV_ID" "$GITHUB_TOKEN")
          echo "Fetching assets from current release..."
          CUR_ASSETS_JSON=$(fetch_all_assets "$GITHUB_REPOSITORY" "$CUR_ID" "$GITHUB_TOKEN")
          
          EXISTING_ASSETS=$(echo "$CUR_ASSETS_JSON" | jq -r '.[].name')
          TOTAL_ASSETS=$(echo "$PREV_ASSETS_JSON" | jq 'length')
          EXISTING_COUNT=$(echo "$EXISTING_ASSETS" | wc -l)
          
          echo "Found $TOTAL_ASSETS assets in previous release"
          echo "Found $EXISTING_COUNT assets in current release"
          
          # Create a temp directory for downloaded assets
          mkdir -p temp_assets
          
          # Download and upload assets in batches to avoid rate limiting
          BATCH_SIZE=10
          COUNTER=0
          FAILED_ASSETS=""
          
          echo "$PREV_ASSETS_JSON" | jq -r '.[] | [.name, .url] | @tsv' | while IFS=$'\t' read -r name url; do
            if echo "$EXISTING_ASSETS" | grep -qx "$name"; then
              echo "Skipping $name (already exists in current release)"
              continue
            fi
            
            echo "Downloading asset: $name"
            asset_data=$(curl -sS -L -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/octet-stream" "$url")
            
            if [ $? -ne 0 ]; then
              echo "Failed to download $name"
              FAILED_ASSETS="$FAILED_ASSETS\n$name (download failed)"
              continue
            fi
            
            echo "Uploading asset: $name"
            if ! upload_asset "$UPLOAD_URL" "$name" "$asset_data" "$GITHUB_TOKEN"; then
              FAILED_ASSETS="$FAILED_ASSETS\n$name (upload failed)"
            fi
            
            # Add a small delay between uploads to avoid rate limiting
            sleep 1
            
            COUNTER=$((COUNTER+1))
            if [ $((COUNTER % BATCH_SIZE)) -eq 0 ]; then
              echo "Processed $COUNTER assets. Pausing for 5 seconds to avoid rate limiting..."
              sleep 5
            fi
          done
          
          # Re-fetch current release assets with pagination
          echo "Verifying transferred assets..."
          CUR_ASSETS_JSON=$(fetch_all_assets "$GITHUB_REPOSITORY" "$CUR_ID" "$GITHUB_TOKEN")
          CUR_ASSETS=$(echo "$CUR_ASSETS_JSON" | jq -r '.[].name' | sort)
          PREV_ASSETS=$(echo "$PREV_ASSETS_JSON" | jq -r '.[].name' | sort)
          
          # Compare: show assets in previous release not in current
          MISSING_ASSETS=$(comm -23 <(echo "$PREV_ASSETS") <(echo "$CUR_ASSETS"))
          
          if [ -n "$FAILED_ASSETS" ]; then
            echo "Failed to transfer some assets:"
            echo -e "$FAILED_ASSETS"
          fi
          
          if [ -z "$MISSING_ASSETS" ]; then
            echo "All assets from previous release are present in the current release."
          else
            echo "Missing assets in current release:"
            echo "$MISSING_ASSETS"
            exit 1
          fi