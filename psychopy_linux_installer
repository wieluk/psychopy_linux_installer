#!/bin/bash
# ==============================================================================
#  Title:         psychopy_linux_installer
#  Description:   This script installs PsychoPy with specified versions of
#                 Python, wxPython, and optional packages.
#  Author:        Lukas Wiertz
#  Date:          2024-10-27
#  Version:       1.2.1
#  License:       GNU General Public License v3.0
# ==============================================================================

show_help() {
    cat << EOF
Usage: ./psychopy_linux_installer [options]
Options:
  --psychopy-version=VERSION                    Specify PsychoPy version (default: 2024.1.4).
  --python-version=3.8|3.9|3.10                 Specify Python version (default: 3.10).
  --existing-python                             Use existing Python version instead of installing a new one. Requires chosen Python version, pip, and venv to be pre-installed and accessible in the system path.
  --wxpython-version=VERSION                    Specify wxPython version (default: 4.2.2).
  --build=[python|wxpython|both]                Build Python and/or wxPython from source instead of downloading.
  --install-dir=DIR                             Specify installation directory (default: "$HOME").
  --no-versioned-install-dir                    Install directly into install-dir without creating a versioned subdirectory. Requires --install-dir.
  --additional-packages=PACKAGES                Specify additional pip packages to install. Format: package1==version,package2. No version is latest.
  --sudo-mode=[ask|auto|error|continue|force]   Control sudo usage. ask: confirm, auto: auto-confirm, error: exit if sudo needed, continue: continue without sudo, force: use sudo directly.
  --disable-shortcut                            Disable desktop shortcut creation.
  --disable-path                                Disable adding psychopy to system path.
  -f, --force                                   Force overwrite of existing installation directory.
  -v, --verbose                                 Enable verbose output.
  -h, --help                                    Show this help message.
EOF
}

# Logging function for verbose output
log() {
    if [ "$verbose" = true ]; then
        "$@"
    else
        "$@" > /dev/null 2>&1
    fi
}

# Function to print log messages with timestamp
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Wrapper function to handle sudo requests and permissions dynamically
sudo_wrapper() {
    local error_output exit_code
    local command=("$@")
    local is_pkg_manager_command=false

    needs_sudo() {
        local exit_code=$1
        local error_output=$2

        case $exit_code in
            13|77|100|126|127) return 0 ;;
        esac

        if [[ $exit_code -ne 0 ]]; then
            echo "$error_output" | grep -Eqi "permission denied|requires root|must be root|not authorized|could not open|operation not permitted|cannot open|superuser privileges|has to be run with|error: must run as root|unless you are root|root privileges are required|eacces|eperm|not allowed|need root|failed to open|permission problem|permission error|not permitted|cannot access|cannot create|cannot remove|cannot write|read-only file system|you don't have the right|do not have the required permissions|cannot execute"
        fi
    }

    handle_sudo_request() {
        local command=("$@")
        local response

        case "$sudo_mode" in
            ask)
                if $is_pkg_manager_command && [[ "$pkg_manager_permission" == true ]]; then
                    log sudo "${command[@]}"
                    return
                fi

                if $is_pkg_manager_command; then
                    read -r -p "Command '${command[*]}' failed due to permission denied. Retry with sudo for this and all future $pkg_manager commands (r), continue (c), quit (q), or auto sudo when needed (a)? [r/c/q/a] " response
                else
                    read -r -p "Command '${command[*]}' failed due to permission denied. Retry with sudo (r), continue without sudo (c), quit (q), or auto sudo when needed (a)? [r/c/q/a] " response
                fi

                case "$response" in
                    [Rr])
                        if $is_pkg_manager_command; then
                            pkg_manager_permission=true
                        fi
                        log_message "Info: Retrying ${command[*]} with sudo ..."
                        log sudo "${command[@]}"
                        ;;
                    [Cc])
                        ;;
                    [aA])
                        log_message "Info: Retrying ${command[*]} with sudo and setting sudo-mode=auto ..."
                        log sudo "${command[@]}"
                        sudo_mode=auto
                        ;;
                    *)
                        log_message "Info: Exiting."
                        exit 1
                        ;;
                esac
                ;;
            auto)
                log log_message "Warning: Command '${command[*]}' failed due to permission denied. Using sudo..."
                log sudo "${command[@]}"
                ;;
            continue)
                log_message "Warning: Command '${command[*]}' failed due to permission denied. Continuing without sudo..."
                ;;
            error)
                log_message "Error: Command '${command[*]}' failed due to permission denied. Sudo is required, but mode is set to 'error'."
                exit 1
                ;;
        esac
    }

    if [[ "$sudo_mode" == "force" ]]; then
        log sudo "${command[@]}"
        return
    fi

    error_output=$("${command[@]}" 2>&1)
    exit_code=$?
    
    is_pkg_manager_command=$([ "$1" == "$pkg_manager" ] && echo true || echo false)

    if needs_sudo "$exit_code" "$error_output"; then
        handle_sudo_request "${command[@]}"
    fi
}

# Function to detect OS of machine
detect_os_version() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        if [ -n "$ID" ] && [ -n "$VERSION_ID" ]; then
            echo "$ID-$VERSION_ID"
            return
        fi
    fi

    if command -v lsb_release > /dev/null 2>&1; then
        version=$(lsb_release -sr | cut -d. -f1)
        echo "$(lsb_release -si)-$version"
        return
    fi

    if [ -f /etc/lsb-release ]; then
        . /etc/lsb-release
        version=$(echo "$DISTRIB_RELEASE" | cut -d. -f1)
        echo "${DISTRIB_ID}-$version"
        return
    fi

    if [ -f /etc/debian_version ]; then
        version=$(cut -d. -f1 < /etc/debian_version)
        echo "debian-$version"
        return
    fi

    if [ -f /etc/redhat-release ]; then
        version=$(sed 's/.*release \([0-9]*\).*/\1/' < /etc/redhat-release)
        echo "$(sed 's/release [0-9]*.*//' < /etc/redhat-release)$version"
        return
    fi

    log_message "Error: Unable to detect OS version."
    exit 1
}

# Function to detect the package manager for the OS
detect_package_manager() {
    if command -v apt-get > /dev/null 2>&1; then
        echo "apt-get"
    elif command -v yum > /dev/null 2>&1; then
        echo "yum"
    elif command -v dnf > /dev/null 2>&1; then
        echo "dnf"
    elif command -v pacman > /dev/null 2>&1; then
        echo "pacman"
    elif command -v zypper > /dev/null 2>&1; then
        echo "zypper"
    else
        log_message "Error: No compatible package manager found. Exiting."
        exit 1
    fi
}

# Function to update the package manager
update_package_manager() {
    case $pkg_manager in
        apt-get) sudo_wrapper apt-get update -qq ;;
        yum) sudo_wrapper yum check-update -q ;;
        dnf) sudo_wrapper dnf check-update -q ;;
        pacman) sudo_wrapper pacman -Sy --noconfirm ;;
        zypper) sudo_wrapper zypper refresh ;;
        *) log_message "Error: No compatible package manager found."; exit 1 ;;
    esac
}

# Function to install packages using the package manager
install_packages() {
    local packages=("$@")
    
    for package in "${packages[@]}"; do
        case $pkg_manager in
            apt-get) sudo_wrapper apt-get install -y -qq "$package" || log_message "Warning: Package $package not found, skipping." ;;
            yum) sudo_wrapper yum install -y -q "$package" || log_message "Warning: Package $package not found, skipping." ;;
            dnf) sudo_wrapper dnf install -y -q "$package" || log_message "Warning: Package $package not found, skipping." ;;
            pacman) sudo_wrapper pacman -Sy --noconfirm "$package" || log_message "Warning: Package $package not found, skipping." ;;
            zypper) sudo_wrapper zypper install -y "$package" || log_message "Warning: Package $package not found, skipping." ;;
            *) log_message "Error: No compatible package manager found."; exit 1 ;;
        esac
    done
}

# Function to install different types of dependencies
install_dependencies() {
    local dep_type=$1
    local dependencies=()

    case $pkg_manager in
        apt-get)
            script_deps=(git curl jq)
            psychopy_deps=(libgtk-3-dev libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libxcb-xinerama0 libegl1-mesa-dev libsdl2-dev libglu1-mesa-dev libusb-1.0-0-dev portaudio19-dev libasound2-dev libxcb-cursor0 libxkbcommon-x11-0)
            python_build_deps=(build-essential libssl-dev zlib1g-dev libsqlite3-dev libffi-dev libbz2-dev libreadline-dev xz-utils make)
            wxpython_deps=(libjpeg-dev gstreamer1.0-plugins-base gstreamer1.0-tools gstreamer1.0-x freeglut3-dev libpng-dev libtiff-dev libnotify-dev libsm-dev libgtk2.0-dev g++ make)
            ;;
        yum|dnf)
            script_deps=(git curl jq)
            psychopy_deps=(gtk3-devel webkit2gtk3-devel libxcb-xinerama mesa-libEGL-devel SDL2-devel mesa-libGLU-devel libusb1-devel portaudio-devel alsa-lib-devel)
            python_build_deps=(gcc openssl-devel bzip2-devel libffi-devel zlib-devel sqlite-devel readline-devel xz-devel make)
            wxpython_deps=(libjpeg-devel libpng-devel libSM-devel gcc-c++ gstreamer1-plugins-base gstreamer1-devel freeglut-devel libjpeg-turbo-devel libpng-devel libtiff-devel libnotify-devel gtk2-devel make)
            ;;
        pacman)
            script_deps=(git curl jq)
            psychopy_deps=(gtk3 webkit2gtk libxcb mesa sdl2 glu libusb portaudio alsa-lib)
            python_build_deps=(base-devel openssl zlib sqlite libffi bzip2 readline xz make)
            wxpython_deps=(libjpeg libpng libsm mesa gstreamer gstreamer-base freeglut libtiff libnotify gtk2 gcc make)
            ;;
        zypper)
            script_deps=(git curl jq)
            psychopy_deps=(gtk3-devel libxcb-xinerama0 libSDL2-devel libusb-1_0-devel portaudio-devel alsa-devel)
            python_build_deps=(gcc libopenssl-devel zlib-devel sqlite3-devel libffi-devel bzip2-devel readline-devel xz-devel make)
            wxpython_deps=(libpng16-devel gstreamer-plugins-base freeglut-devel libnotify-devel libSM-devel gtk2-devel gcc-c++ make)
            ;;
        *)
            log_message "Error: No compatible package manager found."; exit 1 ;;
    esac

    case $dep_type in
        script_deps) dependencies=("${script_deps[@]}") ;;
        python_build_deps) dependencies=("${python_build_deps[@]}") ;;
        psychopy_deps) dependencies=("${psychopy_deps[@]}") ;;
        wxpython_deps) dependencies=("${wxpython_deps[@]}") ;;
        *) log_message "Error: Invalid dependency type specified."; exit 1 ;;
    esac

    install_packages "${dependencies[@]}"
}

# Function to compare version numbers
version_greater_than() {
    if [[ "$1" =~ ^[0-9]+(\.[0-9]+)*$ ]] && [[ "$2" =~ ^[0-9]+(\.[0-9]+)*$ ]]; then
        [ "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1" ]
    else
        return 1
    fi
}

# Function to get the latest version of a package from PyPI
get_latest_pypi_version() {
    local package_name=$1
    local latest_version
    latest_version=$(curl -s "https://pypi.org/pypi/${package_name}/json" | jq -r .info.version)
    if [ -z "$latest_version" ]; then
        log_message "Error: Unable to fetch the latest version for package ${package_name}. Exiting."
        exit 1
    fi
    echo "$latest_version"
}

# Function to check if a specific version of a package exists on PyPI
check_pypi_for_version() {
    local package=$1
    local version=$2
    if ! curl -s "https://pypi.org/pypi/${package}/${version}/json" | jq -e .info.version > /dev/null; then
        log_message "Error: ${package} version ${version} does not exist. Exiting."
        exit 1
    fi
}

# Function to build Python from source
build_python() {
    local major_minor_version official_base_url latest_patch_version official_url temp_file temp_dir
    log_message "Info: Building Python ${python_version} from source this might take a while ..."
    major_minor_version="${python_version}"
    official_base_url="https://www.python.org/ftp/python/"
    
    latest_patch_version=$(curl -s "${official_base_url}" | grep -oP "${major_minor_version}\.[0-9]+/" | sort -V | tail -n 1 | sed 's:/$::')

    official_url="${official_base_url}${latest_patch_version}/Python-${latest_patch_version}.tgz"
    temp_file="Python-${latest_patch_version}.tgz"
    temp_dir="Python-${latest_patch_version}_temp"
    
    log curl -s -O "${official_url}"
    mkdir -p "${temp_dir}"
    tar -xf "${temp_file}" -C "${temp_dir}"

    (
        cd "${temp_dir}/Python-${latest_patch_version}" || exit 1
        log ./configure --enable-optimizations --with-ensurepip=install --prefix=/usr/local/psychopy_python
        log make -j "$(nproc)"
        sudo_wrapper make altinstall
    )

    sudo_wrapper rm -rf "${temp_dir}" "${temp_file}"
    log_message "Info: Python ${latest_patch_version} built and installed into /usr/local/psychopy_python."
    return 0
}

# Function to download prebuilt Python from Nextcloud
python_nextcloud_install() {
    local versions_url temp_versions_file latest_patch_version nextcloud_url temp_file temp_dir
    versions_url="https://cloud.uni-graz.at/index.php/s/o4tnQgN6gjDs3CK/download?path=python_versions.txt"
    temp_versions_file="/tmp/python_versions.txt"
    
    if ! log curl -s -f -X GET "${versions_url}" --output "${temp_versions_file}"; then
        log_message "Warning: Could not download python_versions.txt from Nextcloud."
        return 1
    fi

    latest_patch_version=$(grep -oP "python-${python_version}\.[0-9]+-${processor_structure}-${os_version}.tar.gz" "${temp_versions_file}" | sort -V | tail -n 1)

    if [ -z "${latest_patch_version}" ]; then
        log_message "Warning: No matching Python version found in python_versions.txt for Python ${python_version}."
        return 1
    fi

    nextcloud_url="https://cloud.uni-graz.at/index.php/s/o4tnQgN6gjDs3CK/download?path=${latest_patch_version}"
    temp_file="${latest_patch_version}"
    temp_dir="${latest_patch_version%.tar.gz}_temp"

    if log curl -s -f -X GET "${nextcloud_url}" --output "${temp_file}"; then
        log_message "Info: Successfully downloaded Python ${latest_patch_version} ... making an altinstall ..."
        mkdir -p "${temp_dir}"
        tar -xf "${temp_file}" -C "${temp_dir}"
        (
            cd "${temp_dir}" || exit
            sudo_wrapper make altinstall
        )
        sudo_wrapper rm -rf "${temp_dir}" "${temp_file}"
        log_message "Successfully installed Python ${latest_patch_version} into /usr/local/psychopy_python"
        return 0
    else
        log_message "Warning: Failed to download from Nextcloud. No matching Python version found."
        return 1
    fi
}

# Function to build wxPython from source
build_wxpython() {
    log_message "Info: Installing wxPython build dependencies. This might take a while ..."
    install_dependencies wxpython_deps

    log_message "Info: Building wxPython $wxpython_version from source. This might take a while ..."
    if pip install --no-binary=:all: "wxpython==$wxpython_version"; then
        log_message "Info: Successfully built wxPython from source."
    else
        log_message "Error: Building wxPython from source failed."
        exit 1
    fi
}

# Function install wxPython using pip without building
wxpython_pip_install() {
    if log pip install --only-binary=:all: "wxpython==$wxpython_version"; then
        log_message "Info: Successfully installed wxPython version $wxpython_version using a pip wheel."
        return 0
    else
        return 1
    fi
}

# Function to install wxPython from wheel URL
wxpython_wheelurl_install() {
    local wheel_dir python_version_short html wheels latest_wheel wheel_url wheel_file
    local base_url="https://extras.wxpython.org/wxPython4/extras/linux/gtk3/"

    wheel_dir="${base_url}${os_version}/"
    python_version_short=$(python -c "import sys; print('cp' + ''.join(map(str, sys.version_info[:2])))")
    html=$(curl -s "$wheel_dir")

    wheels=$(echo "$html" | grep -oP 'href="\K[^"]*' | grep -E "${wxpython_version}.*${python_version_short}.*${processor_structure}.*\.whl" | grep -v ".asc" | sort)

    if [ -z "$wheels" ]; then
        log_message "Warning: No matching wxPython wheel found for ${wxpython_version}, ${os_version}, Python ${python_version_short}, and ${processor_structure} on extras.wxpython.org."
        return 1
    fi

    latest_wheel=$(echo "$wheels" | tail -n 1)
    wheel_url="${wheel_dir}${latest_wheel}"
    wheel_file=$(basename "$wheel_url")

    if log curl -s -O "$wheel_url"; then
        log_message "Info: Download from extras.wxpython.org successful. Installing wxPython from $wheel_file..."
        if log pip install "$wheel_file"; then
            log_message "Info: Installed wxPython from $wheel_file"
            sudo_wrapper rm "$wheel_file"
            return 0
        else
            log_message "Warning: Installing wxPython from $wheel_file failed."
            sudo_wrapper rm "$wheel_file"
            return 1
        fi
    else
        log_message "Warning: Downloading $wheel_url failed."
        return 1
    fi
}

# Function to install wxPython from Nextcloud
wxpython_nextcloud_install() {
    python_major=$(python -c "import sys; print(sys.version_info.major)")
    python_minor=$(python -c "import sys; print(sys.version_info.minor)")
    wheel_name="wxPython-${wxpython_version}-cp${python_major}${python_minor}-cp${python_major}${python_minor}-${processor_structure}-${os_version}.whl"
    wx_python_nextcloud_url="https://cloud.uni-graz.at/index.php/s/YtX33kbasHMZdgs/download?path=${wheel_name}"

    if log curl -f -X GET "$wx_python_nextcloud_url" --output "$wheel_name"; then
        wx_python_file="${wheel_name%-"${os_version}".whl}.whl"
        mv "$wheel_name" "$wx_python_file"
        log_message "Info: Download from nextcloud successful. Installing wxPython from $wx_python_file"
        if log pip install "$wx_python_file"; then
            log_message "Info: Installed wxPython from $wx_python_file"
            sudo_wrapper rm "$wx_python_file"
            return 0
        else
            log_message "Warning: Installing wxPython from Nextcloud failed."
            sudo_wrapper rm "$wx_python_file"
            return 1
        fi
    else
        log_message "Warning: Downloading from Nextcloud failed."
        return 1
    fi
}

# Function to create a desktop shortcut file
create_desktop_shortcut() {
    local desktop_shortcut="${HOME}/Desktop/"
    local desktop_dir="${HOME}/.local/share/applications/"
    local psychopy_exec="${psychopy_dir}/bin/psychopy"
    local resources_dir="${psychopy_dir}/Resources"

    local shortcuts=(
        "--no-splash" "PsychoPy (v${psychopy_version}) Python(v${python_version})" "psychopy.png"
        "--builder --no-splash" "PsychoPy Builder (v${psychopy_version}) Python(v${python_version})" "builder.png"
        "--coder --no-splash" "PsychoPy Coder (v${psychopy_version}) Python(v${python_version})" "coder.png"
    )

    if [ ! -d "$desktop_shortcut" ]; then
        log_message "Warning: Desktop directory $desktop_shortcut does not exist. Skipping desktop shortcut creation."
        return
    fi

    if [ ! -d "${resources_dir}" ]; then
        sudo_wrapper mkdir -p "${resources_dir}"
    fi

    for ((i=0; i<${#shortcuts[@]}; i+=3)); do
        local exec_args="${shortcuts[i]}"
        local pretty_name="${shortcuts[i+1]}"
        local icon_file="${shortcuts[i+2]}"
        local icon_url="https://raw.githubusercontent.com/wieluk/psychopy_linux_installer/main/Resources/${icon_file}"
        local desktop_file="${desktop_shortcut}${pretty_name}.desktop"
        local icon_path="${resources_dir}/${icon_file}"

        if curl --output /dev/null --silent --head --fail "${icon_url}"; then
            sudo_wrapper curl -o "${icon_path}" "${icon_url}"
        else
            log_message "Warning: Icon file ${icon_url} not found, skipping..."
        fi

        local icon_line=""
        if [ -f "$icon_path" ]; then
            icon_line="Icon=${icon_path}"
        fi

        local desktop_content="[Desktop Entry]
Version=1.0
Name=${pretty_name}
Comment=Run PsychoPy version ${psychopy_version} with ${exec_args}
Exec=${psychopy_exec} ${exec_args}
${icon_line}
Terminal=false
Type=Application
Categories=Education;Science;"

        sudo_wrapper sh -c "echo '$desktop_content' > '$desktop_file'"
        sudo_wrapper chmod +x "$desktop_file"
        sudo_wrapper gio set "$desktop_file" metadata::trusted true

        if [ -d "$desktop_dir" ]; then
            sudo_wrapper ln -sf "$desktop_file" "${desktop_dir}${pretty_name}.desktop"
        fi
    done
}

# Function to create add PsychoPy to system path
add_psychopy_to_path() {
    local shell_name
    local bin_dir="${psychopy_dir}/.bin"
    local target_bin="${bin_dir}/psychopy_${psychopy_version}_py${python_version}"

    shell_name=$(basename "$SHELL")
    mkdir -p "$bin_dir"
    sudo_wrapper ln -sf "${psychopy_dir}/bin/psychopy" "$target_bin"

    local config_file=""
    local path_line=""

    case $shell_name in
        bash)
            config_file="$HOME/.bashrc"
            path_line="export PATH=\"${bin_dir}:\$PATH\""
            ;;
        zsh)
            config_file="$HOME/.zshrc"
            path_line="export PATH=\"${bin_dir}:\$PATH\""
            ;;
        fish)
            config_file="$HOME/.config/fish/config.fish"
            path_line="set -gx PATH \"${bin_dir}\" \$PATH"
            ;;
        csh|tcsh)
            config_file="$HOME/.${shell_name}rc"
            path_line="setenv PATH ${bin_dir}:\$PATH"
            ;;
        *)
            log_message "Warning: Unsupported shell: $shell_name; PsychoPy not added to path"
            echo
            log_message "PsychoPy installation complete!"
            echo
            echo "To start PsychoPy, use:"
            echo "${psychopy_dir}/bin/psychopy"
            exit 0
            ;;
    esac

    if ! grep -Fxq "$path_line" "$config_file"; then
        sudo_wrapper sh -c "echo '$path_line' >> \"$config_file\""
        log_message "Info: PsychoPy path added to $config_file"
    else
        log_message "Info: PsychoPy path already exists in $config_file"
    fi

    echo
    log_message "PsychoPy installation complete!"
    echo
    echo "To update your path, run:"
    echo "source $config_file"
    echo
    echo "To start PsychoPy from terminal, use:"
    echo "psychopy_${psychopy_version}_py${python_version}"
    echo
    echo "You can also use the absolute path:"
    echo "${psychopy_dir}/bin/psychopy"
}

main() {
    psychopy_version="2024.1.4"
    python_version="3.10"
    existing_python=false
    wxpython_version="4.2.2"
    build_python=false
    build_wx=false
    install_dir="$HOME"
    no_versioned_install_dir=false
    install_dir_set_by_user=false
    additional_packages=""
    sudo_mode="ask"
    pkg_manager_permission=false
    disable_shortcut=false
    disable_path=false
    force_overwrite=false
    verbose=false

    for arg in "$@"; do
        case $arg in
            --psychopy-version=*)
                psychopy_version="${arg#*=}"
                ;;
            --python-version=*)
                python_version="${arg#*=}"
                if [[ ! $python_version =~ ^3\.(8|9|10)$ ]]; then
                    echo "Error: Invalid Python version specified. Only versions 3.8, 3.9, or 3.10 are allowed."
                    exit 1
                fi
                ;;
            --existing-python)
                existing_python=true
                ;;
            --wxpython-version=*)
                wxpython_version="${arg#*=}"
                ;;
            --build=*)
                build_arg="${arg#*=}"
                case $build_arg in
                    python)
                        build_python=true
                        ;;
                    wxpython)
                        build_wx=true
                        ;;
                    both)
                        build_python=true
                        build_wx=true
                        ;;
                    *)
                        echo "Error: Invalid option for --build: $build_arg"
                        show_help
                        exit 1
                        ;;
                esac
                ;;
            --install-dir=*)
                install_dir="${arg#*=}"
                install_dir_set_by_user=true
                ;;
            --no-versioned-install-dir)
                if [ "$install_dir_set_by_user" = false ]; then
                    echo "Error: --no-versioned-install-dir cannot be used without setting --install_dir."
                    exit 1
                fi
                no_versioned_install_dir=true
                ;;
            --additional-packages=*)
                additional_packages="${arg#*=}"
                ;;
            --sudo-mode=*)
                sudo_mode="${arg#*=}"
                if [[ "$sudo_mode" != "ask" && "$sudo_mode" != "continue" && "$sudo_mode" != "auto" && "$sudo_mode" != "error"  && "$sudo_mode" != "force" ]]; then
                    echo "Error: Invalid value for --sudo_mode. Valid options are 'ask', 'continue', 'auto', 'error' or 'force'."
                    exit 1
                fi
                ;;
            --disable-shortcut)
                disable_shortcut=true
                ;;
            --disable-path)
                disable_path=true
                ;;
            -f|--force)
                force_overwrite=true
                ;;
            -v|--verbose)
                verbose=true
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo "Error: Unknown option: $arg"
                show_help
                exit 1
                ;;
        esac
    done

    # Detect OS version and architecture
    os_version=$(detect_os_version | tr '[:upper:]' '[:lower:]')
    processor_structure=$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m)
    log_message "Info: Initiating PsychoPy(${psychopy_version}) installation on ${os_version} (${processor_structure})."

    # Exit if --existing-python flag used but python not in path.
    if [ "$existing_python" = true ] && ! command -v "python${python_version}" > /dev/null 2>&1; then
        log_message "Error: Python${python_version} not in path use without --existing-python to install Python. Exiting."
        exit 1
    fi

    # Detect package manager
    pkg_manager=$(detect_package_manager)

    # Update package manager
    log_message "Info: Updating ${pkg_manager} package manager."
    update_package_manager "$pkg_manager"

    # Install basic dependencies
    log_message "Info: Installing git, curl, and jq."
    install_dependencies script_deps

    # Determine PsychoPy version to install
    if [ "$psychopy_version" == "latest" ]; then
        psychopy_version=$(get_latest_pypi_version "psychopy")
    elif [ "$psychopy_version" != "git" ]; then
        check_pypi_for_version psychopy "${psychopy_version}"
    fi

    # Install PsychoPy dependencies
    log_message "Info: Installing PsychoPy dependencies. This might take a while ..."
    install_dependencies psychopy_deps

    # Set up PsychoPy installation directory
    if [ "$no_versioned_install_dir" = true ]; then
        psychopy_dir="${install_dir}"
    else
        psychopy_dir="${install_dir}/psychopy_${psychopy_version}_py${python_version}"
    fi

    if [ -d "${psychopy_dir}" ]; then
        if [ "$force_overwrite" = true ]; then
            log_message "Info: Directory ${psychopy_dir} already exists. Overwriting ..."
            sudo_wrapper rm -rf "${psychopy_dir}"
            sudo_wrapper mkdir -p "${psychopy_dir}"
        else
            log_message "Error: Directory ${psychopy_dir} already exists. Use the --force flag to overwrite. Exiting."
            exit 1
        fi
    else
        log_message "Info: Creating PsychoPy directory at ${psychopy_dir} ..."
        sudo_wrapper mkdir -p "${psychopy_dir}"
    fi

    #Check if psychopy_dir is writeable else change ownership 
    [ -w "${psychopy_dir}" ] || sudo_wrapper chown "$USER" "${psychopy_dir}"

    # Exit script if writing or changing directory to psychopy_dir is not possible
    if ! [ -w "${psychopy_dir}" ] || ! cd "${psychopy_dir}"; then
        log_message "Error: Failed to access or change directory to ${psychopy_dir}. Exiting."
        exit 1
    fi
    
    if [ "$existing_python" = false ]; then
        if [ "$build_python" = true ]; then
            build_python
        else
            if [ -x "/usr/local/psychopy_python/bin/python${python_version}" ]; then
                log_message "Info: Python version ${python_version} is already installed in /usr/local/psychopy_python. Skipping installation."
            else
                log_message "Info: Installing python build dependencies ..."
                log install_dependencies python_build_deps
                if python_nextcloud_install; then
                    :
                else   
                    build_python
                fi
            fi
        fi
        # Check if the Python version was successfully installed in the custom directory
        if [ ! -x "/usr/local/psychopy_python/bin/python${python_version}" ]; then
            log_message "Error: python${python_version} not found in /usr/local/psychopy_python. Something went wrong while installing/building. Try --build=python and --verbose as arguments."
            exit 1
        fi
        export PATH=/usr/local/psychopy_python/bin:$PATH
        /usr/local/psychopy_python/bin/python"${python_version}" -m venv "${psychopy_dir}"
    else
        python"${python_version}" -m venv "${psychopy_dir}"
    fi

    log_message "Info: Succesfully created Python${python_version} venv in ${psychopy_dir} ... Activating."
    log source "${psychopy_dir}/bin/activate"
    
    # Upgrade pip and install required Python packages
    log_message "Info: Upgrading pip, distro, sip, six, psychtoolbox and attrdict ..."
    log pip install -U pip distro sip six psychtoolbox attrdict

    # Install numpy<2 if PsychoPy version is less than 2024.2.0
    if version_greater_than "2024.2.0" "$psychopy_version"; then
        log_message "Info: PsychoPy version < 2024.2.0, installing numpy<2"
        log pip install "numpy<2"
    fi

    # Determine wxPython version and install it
    if [ "$wxpython_version" = "latest" ]; then
        wxpython_version=$(get_latest_pypi_version "wxPython")
    elif [ "$wxpython_version" != "git" ]; then
        check_pypi_for_version wxpython "${wxpython_version}"
    fi

    if [ "$wxpython_version" = "git" ]; then
        log_message "Info: Installing wxPython build dependencies. This might take a while ..."
        install_dependencies wxpython_deps
        log_message "Info: Building wxPython from git. This might take a while ..."
        log pip install git+https://github.com/wxWidgets/Phoenix
    elif [ "$build_wx" = true ]; then
        build_wxpython
    else
        if wxpython_pip_install; then
            :
        elif wxpython_wheelurl_install; then
            :
        elif wxpython_nextcloud_install; then
            :
        else
            build_wxpython
        fi
    fi

    # Check if wxPython was successfully installed
    if ! pip show wxPython &> /dev/null; then
        log_message "Error: wxPython is not installed. Something went wrong during the installation. Use --verbose and maybe --build=wxpython flags."
        exit 1
    fi

    # Install PsychoPy
    log_message "Info: Installing PsychoPy version ${psychopy_version}"
    if [ "$psychopy_version" == "git" ]; then
        log pip install git+https://github.com/psychopy/psychopy.git@dev
    else
        log pip install psychopy=="${psychopy_version}"
    fi

    # Check if PsychoPy was successfully installed
    if ! pip show psychopy &> /dev/null; then
        log_message "Error: PsychoPy is not installed successfully. Something went wrong during the installation. Use the --verbose flag."
        exit 1
    fi

    # Install additional packages if specified
    if [ -n "$additional_packages" ]; then
        log_message "Info: Installing additional packages..."
        IFS=',' read -ra PACKAGES <<< "$additional_packages"
        for package in "${PACKAGES[@]}"; do
            log_message "Info: Installing $package..."
            if log pip install "$package"; then
                installed_version=$(pip show "${package%%=*}" | grep Version | cut -d' ' -f2)
                log_message "Info: ${package%%=*} version $installed_version installed successfully."
            else
                log_message "Warning: Failed to install $package. Skipping."
            fi
        done
    fi

    # Deactivate virtual environment
    deactivate

    # Add user to the 'psychopy' group and set security limits
    log_message "Info: Adding ${USER} to psychopy group and setting security limits in /etc/security/limits.d/99-psychopylimits.conf."
    sudo_wrapper groupadd --force psychopy
    sudo_wrapper usermod -a -G psychopy "$USER"
    sudo_wrapper sh -c 'echo "@psychopy - nice -20\n@psychopy - rtprio 50\n@psychopy - memlock unlimited" > /etc/security/limits.d/99-psychopylimits.conf'

    # Create desktop shortcut
    if [ "$disable_shortcut" = false ]; then
        create_desktop_shortcut
    else
        log_message "Info: Desktop shortcut creation disabled by user."
    fi

    # Add PsychoPy to PATH
    if [ "$disable_path" = false ]; then
        add_psychopy_to_path
    else
        echo
        log_message "Info: PsychoPy installation complete!"
        echo
        echo "To start PsychoPy, use:"
        echo "${psychopy_dir}/bin/psychopy"
    fi
}

main "$@"